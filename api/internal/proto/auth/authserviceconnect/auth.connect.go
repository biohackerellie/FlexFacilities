// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: proto/auth/auth.proto

package authserviceconnect

import (
	auth "api/internal/proto/auth"
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// AuthName is the fully-qualified name of the Auth service.
	AuthName = "api.auth.Auth"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// AuthGetSessionProcedure is the fully-qualified name of the Auth's GetSession RPC.
	AuthGetSessionProcedure = "/api.auth.Auth/GetSession"
	// AuthLoginProcedure is the fully-qualified name of the Auth's Login RPC.
	AuthLoginProcedure = "/api.auth.Auth/Login"
	// AuthRegisterProcedure is the fully-qualified name of the Auth's Register RPC.
	AuthRegisterProcedure = "/api.auth.Auth/Register"
	// AuthRequestResetPasswordProcedure is the fully-qualified name of the Auth's RequestResetPassword
	// RPC.
	AuthRequestResetPasswordProcedure = "/api.auth.Auth/RequestResetPassword"
	// AuthResetPasswordProcedure is the fully-qualified name of the Auth's ResetPassword RPC.
	AuthResetPasswordProcedure = "/api.auth.Auth/ResetPassword"
	// AuthVerify2FACodeProcedure is the fully-qualified name of the Auth's Verify2FACode RPC.
	AuthVerify2FACodeProcedure = "/api.auth.Auth/Verify2FACode"
	// AuthVerifyResetPasswordProcedure is the fully-qualified name of the Auth's VerifyResetPassword
	// RPC.
	AuthVerifyResetPasswordProcedure = "/api.auth.Auth/VerifyResetPassword"
)

// AuthClient is a client for the api.auth.Auth service.
type AuthClient interface {
	GetSession(context.Context, *connect.Request[auth.GetSessionRequest]) (*connect.Response[auth.GetSessionResponse], error)
	Login(context.Context, *connect.Request[auth.LoginRequest]) (*connect.Response[auth.LoginResponse], error)
	Register(context.Context, *connect.Request[auth.RegisterRequest]) (*connect.Response[auth.LoginResponse], error)
	RequestResetPassword(context.Context, *connect.Request[auth.RequestResetPasswordRequest]) (*connect.Response[auth.LoginResponse], error)
	ResetPassword(context.Context, *connect.Request[auth.LoginRequest]) (*connect.Response[auth.LoginResponse], error)
	Verify2FACode(context.Context, *connect.Request[auth.VerifyRequest]) (*connect.Response[auth.VerifyResponse], error)
	VerifyResetPassword(context.Context, *connect.Request[auth.VerifyPasswordRequest]) (*connect.Response[auth.VerifyResetResponse], error)
}

// NewAuthClient constructs a client for the api.auth.Auth service. By default, it uses the Connect
// protocol with the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed
// requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewAuthClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) AuthClient {
	baseURL = strings.TrimRight(baseURL, "/")
	authMethods := auth.File_proto_auth_auth_proto.Services().ByName("Auth").Methods()
	return &authClient{
		getSession: connect.NewClient[auth.GetSessionRequest, auth.GetSessionResponse](
			httpClient,
			baseURL+AuthGetSessionProcedure,
			connect.WithSchema(authMethods.ByName("GetSession")),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		login: connect.NewClient[auth.LoginRequest, auth.LoginResponse](
			httpClient,
			baseURL+AuthLoginProcedure,
			connect.WithSchema(authMethods.ByName("Login")),
			connect.WithClientOptions(opts...),
		),
		register: connect.NewClient[auth.RegisterRequest, auth.LoginResponse](
			httpClient,
			baseURL+AuthRegisterProcedure,
			connect.WithSchema(authMethods.ByName("Register")),
			connect.WithClientOptions(opts...),
		),
		requestResetPassword: connect.NewClient[auth.RequestResetPasswordRequest, auth.LoginResponse](
			httpClient,
			baseURL+AuthRequestResetPasswordProcedure,
			connect.WithSchema(authMethods.ByName("RequestResetPassword")),
			connect.WithClientOptions(opts...),
		),
		resetPassword: connect.NewClient[auth.LoginRequest, auth.LoginResponse](
			httpClient,
			baseURL+AuthResetPasswordProcedure,
			connect.WithSchema(authMethods.ByName("ResetPassword")),
			connect.WithClientOptions(opts...),
		),
		verify2FACode: connect.NewClient[auth.VerifyRequest, auth.VerifyResponse](
			httpClient,
			baseURL+AuthVerify2FACodeProcedure,
			connect.WithSchema(authMethods.ByName("Verify2FACode")),
			connect.WithClientOptions(opts...),
		),
		verifyResetPassword: connect.NewClient[auth.VerifyPasswordRequest, auth.VerifyResetResponse](
			httpClient,
			baseURL+AuthVerifyResetPasswordProcedure,
			connect.WithSchema(authMethods.ByName("VerifyResetPassword")),
			connect.WithClientOptions(opts...),
		),
	}
}

// authClient implements AuthClient.
type authClient struct {
	getSession           *connect.Client[auth.GetSessionRequest, auth.GetSessionResponse]
	login                *connect.Client[auth.LoginRequest, auth.LoginResponse]
	register             *connect.Client[auth.RegisterRequest, auth.LoginResponse]
	requestResetPassword *connect.Client[auth.RequestResetPasswordRequest, auth.LoginResponse]
	resetPassword        *connect.Client[auth.LoginRequest, auth.LoginResponse]
	verify2FACode        *connect.Client[auth.VerifyRequest, auth.VerifyResponse]
	verifyResetPassword  *connect.Client[auth.VerifyPasswordRequest, auth.VerifyResetResponse]
}

// GetSession calls api.auth.Auth.GetSession.
func (c *authClient) GetSession(ctx context.Context, req *connect.Request[auth.GetSessionRequest]) (*connect.Response[auth.GetSessionResponse], error) {
	return c.getSession.CallUnary(ctx, req)
}

// Login calls api.auth.Auth.Login.
func (c *authClient) Login(ctx context.Context, req *connect.Request[auth.LoginRequest]) (*connect.Response[auth.LoginResponse], error) {
	return c.login.CallUnary(ctx, req)
}

// Register calls api.auth.Auth.Register.
func (c *authClient) Register(ctx context.Context, req *connect.Request[auth.RegisterRequest]) (*connect.Response[auth.LoginResponse], error) {
	return c.register.CallUnary(ctx, req)
}

// RequestResetPassword calls api.auth.Auth.RequestResetPassword.
func (c *authClient) RequestResetPassword(ctx context.Context, req *connect.Request[auth.RequestResetPasswordRequest]) (*connect.Response[auth.LoginResponse], error) {
	return c.requestResetPassword.CallUnary(ctx, req)
}

// ResetPassword calls api.auth.Auth.ResetPassword.
func (c *authClient) ResetPassword(ctx context.Context, req *connect.Request[auth.LoginRequest]) (*connect.Response[auth.LoginResponse], error) {
	return c.resetPassword.CallUnary(ctx, req)
}

// Verify2FACode calls api.auth.Auth.Verify2FACode.
func (c *authClient) Verify2FACode(ctx context.Context, req *connect.Request[auth.VerifyRequest]) (*connect.Response[auth.VerifyResponse], error) {
	return c.verify2FACode.CallUnary(ctx, req)
}

// VerifyResetPassword calls api.auth.Auth.VerifyResetPassword.
func (c *authClient) VerifyResetPassword(ctx context.Context, req *connect.Request[auth.VerifyPasswordRequest]) (*connect.Response[auth.VerifyResetResponse], error) {
	return c.verifyResetPassword.CallUnary(ctx, req)
}

// AuthHandler is an implementation of the api.auth.Auth service.
type AuthHandler interface {
	GetSession(context.Context, *connect.Request[auth.GetSessionRequest]) (*connect.Response[auth.GetSessionResponse], error)
	Login(context.Context, *connect.Request[auth.LoginRequest]) (*connect.Response[auth.LoginResponse], error)
	Register(context.Context, *connect.Request[auth.RegisterRequest]) (*connect.Response[auth.LoginResponse], error)
	RequestResetPassword(context.Context, *connect.Request[auth.RequestResetPasswordRequest]) (*connect.Response[auth.LoginResponse], error)
	ResetPassword(context.Context, *connect.Request[auth.LoginRequest]) (*connect.Response[auth.LoginResponse], error)
	Verify2FACode(context.Context, *connect.Request[auth.VerifyRequest]) (*connect.Response[auth.VerifyResponse], error)
	VerifyResetPassword(context.Context, *connect.Request[auth.VerifyPasswordRequest]) (*connect.Response[auth.VerifyResetResponse], error)
}

// NewAuthHandler builds an HTTP handler from the service implementation. It returns the path on
// which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewAuthHandler(svc AuthHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	authMethods := auth.File_proto_auth_auth_proto.Services().ByName("Auth").Methods()
	authGetSessionHandler := connect.NewUnaryHandler(
		AuthGetSessionProcedure,
		svc.GetSession,
		connect.WithSchema(authMethods.ByName("GetSession")),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	authLoginHandler := connect.NewUnaryHandler(
		AuthLoginProcedure,
		svc.Login,
		connect.WithSchema(authMethods.ByName("Login")),
		connect.WithHandlerOptions(opts...),
	)
	authRegisterHandler := connect.NewUnaryHandler(
		AuthRegisterProcedure,
		svc.Register,
		connect.WithSchema(authMethods.ByName("Register")),
		connect.WithHandlerOptions(opts...),
	)
	authRequestResetPasswordHandler := connect.NewUnaryHandler(
		AuthRequestResetPasswordProcedure,
		svc.RequestResetPassword,
		connect.WithSchema(authMethods.ByName("RequestResetPassword")),
		connect.WithHandlerOptions(opts...),
	)
	authResetPasswordHandler := connect.NewUnaryHandler(
		AuthResetPasswordProcedure,
		svc.ResetPassword,
		connect.WithSchema(authMethods.ByName("ResetPassword")),
		connect.WithHandlerOptions(opts...),
	)
	authVerify2FACodeHandler := connect.NewUnaryHandler(
		AuthVerify2FACodeProcedure,
		svc.Verify2FACode,
		connect.WithSchema(authMethods.ByName("Verify2FACode")),
		connect.WithHandlerOptions(opts...),
	)
	authVerifyResetPasswordHandler := connect.NewUnaryHandler(
		AuthVerifyResetPasswordProcedure,
		svc.VerifyResetPassword,
		connect.WithSchema(authMethods.ByName("VerifyResetPassword")),
		connect.WithHandlerOptions(opts...),
	)
	return "/api.auth.Auth/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case AuthGetSessionProcedure:
			authGetSessionHandler.ServeHTTP(w, r)
		case AuthLoginProcedure:
			authLoginHandler.ServeHTTP(w, r)
		case AuthRegisterProcedure:
			authRegisterHandler.ServeHTTP(w, r)
		case AuthRequestResetPasswordProcedure:
			authRequestResetPasswordHandler.ServeHTTP(w, r)
		case AuthResetPasswordProcedure:
			authResetPasswordHandler.ServeHTTP(w, r)
		case AuthVerify2FACodeProcedure:
			authVerify2FACodeHandler.ServeHTTP(w, r)
		case AuthVerifyResetPasswordProcedure:
			authVerifyResetPasswordHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedAuthHandler returns CodeUnimplemented from all methods.
type UnimplementedAuthHandler struct{}

func (UnimplementedAuthHandler) GetSession(context.Context, *connect.Request[auth.GetSessionRequest]) (*connect.Response[auth.GetSessionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.auth.Auth.GetSession is not implemented"))
}

func (UnimplementedAuthHandler) Login(context.Context, *connect.Request[auth.LoginRequest]) (*connect.Response[auth.LoginResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.auth.Auth.Login is not implemented"))
}

func (UnimplementedAuthHandler) Register(context.Context, *connect.Request[auth.RegisterRequest]) (*connect.Response[auth.LoginResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.auth.Auth.Register is not implemented"))
}

func (UnimplementedAuthHandler) RequestResetPassword(context.Context, *connect.Request[auth.RequestResetPasswordRequest]) (*connect.Response[auth.LoginResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.auth.Auth.RequestResetPassword is not implemented"))
}

func (UnimplementedAuthHandler) ResetPassword(context.Context, *connect.Request[auth.LoginRequest]) (*connect.Response[auth.LoginResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.auth.Auth.ResetPassword is not implemented"))
}

func (UnimplementedAuthHandler) Verify2FACode(context.Context, *connect.Request[auth.VerifyRequest]) (*connect.Response[auth.VerifyResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.auth.Auth.Verify2FACode is not implemented"))
}

func (UnimplementedAuthHandler) VerifyResetPassword(context.Context, *connect.Request[auth.VerifyPasswordRequest]) (*connect.Response[auth.VerifyResetResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.auth.Auth.VerifyResetPassword is not implemented"))
}
