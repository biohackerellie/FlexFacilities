// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: proto/reservation/reservation.proto

package reservationserviceconnect

import (
	reservation "api/internal/proto/reservation"
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// ReservationServiceName is the fully-qualified name of the ReservationService service.
	ReservationServiceName = "api.reservation.ReservationService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ReservationServiceGetAllReservationsProcedure is the fully-qualified name of the
	// ReservationService's GetAllReservations RPC.
	ReservationServiceGetAllReservationsProcedure = "/api.reservation.ReservationService/GetAllReservations"
	// ReservationServiceGetReservationProcedure is the fully-qualified name of the ReservationService's
	// GetReservation RPC.
	ReservationServiceGetReservationProcedure = "/api.reservation.ReservationService/GetReservation"
	// ReservationServiceRequestCountProcedure is the fully-qualified name of the ReservationService's
	// RequestCount RPC.
	ReservationServiceRequestCountProcedure = "/api.reservation.ReservationService/RequestCount"
	// ReservationServiceGetRequestsThisWeekProcedure is the fully-qualified name of the
	// ReservationService's GetRequestsThisWeek RPC.
	ReservationServiceGetRequestsThisWeekProcedure = "/api.reservation.ReservationService/GetRequestsThisWeek"
	// ReservationServiceCreateReservationProcedure is the fully-qualified name of the
	// ReservationService's CreateReservation RPC.
	ReservationServiceCreateReservationProcedure = "/api.reservation.ReservationService/CreateReservation"
	// ReservationServiceUpdateReservationProcedure is the fully-qualified name of the
	// ReservationService's UpdateReservation RPC.
	ReservationServiceUpdateReservationProcedure = "/api.reservation.ReservationService/UpdateReservation"
	// ReservationServiceUpdateReservationStatusProcedure is the fully-qualified name of the
	// ReservationService's UpdateReservationStatus RPC.
	ReservationServiceUpdateReservationStatusProcedure = "/api.reservation.ReservationService/UpdateReservationStatus"
	// ReservationServiceDeleteReservationProcedure is the fully-qualified name of the
	// ReservationService's DeleteReservation RPC.
	ReservationServiceDeleteReservationProcedure = "/api.reservation.ReservationService/DeleteReservation"
	// ReservationServiceUserReservationsProcedure is the fully-qualified name of the
	// ReservationService's UserReservations RPC.
	ReservationServiceUserReservationsProcedure = "/api.reservation.ReservationService/UserReservations"
	// ReservationServiceCreateReservationDatesProcedure is the fully-qualified name of the
	// ReservationService's CreateReservationDates RPC.
	ReservationServiceCreateReservationDatesProcedure = "/api.reservation.ReservationService/CreateReservationDates"
	// ReservationServiceUpdateReservationDatesProcedure is the fully-qualified name of the
	// ReservationService's UpdateReservationDates RPC.
	ReservationServiceUpdateReservationDatesProcedure = "/api.reservation.ReservationService/UpdateReservationDates"
	// ReservationServiceUpdateReservationDatesStatusProcedure is the fully-qualified name of the
	// ReservationService's UpdateReservationDatesStatus RPC.
	ReservationServiceUpdateReservationDatesStatusProcedure = "/api.reservation.ReservationService/UpdateReservationDatesStatus"
	// ReservationServiceDeleteReservationDatesProcedure is the fully-qualified name of the
	// ReservationService's DeleteReservationDates RPC.
	ReservationServiceDeleteReservationDatesProcedure = "/api.reservation.ReservationService/DeleteReservationDates"
	// ReservationServiceCreateReservationFeeProcedure is the fully-qualified name of the
	// ReservationService's CreateReservationFee RPC.
	ReservationServiceCreateReservationFeeProcedure = "/api.reservation.ReservationService/CreateReservationFee"
	// ReservationServiceUpdateReservationFeeProcedure is the fully-qualified name of the
	// ReservationService's UpdateReservationFee RPC.
	ReservationServiceUpdateReservationFeeProcedure = "/api.reservation.ReservationService/UpdateReservationFee"
	// ReservationServiceDeleteReservationFeeProcedure is the fully-qualified name of the
	// ReservationService's DeleteReservationFee RPC.
	ReservationServiceDeleteReservationFeeProcedure = "/api.reservation.ReservationService/DeleteReservationFee"
	// ReservationServiceCostReducerProcedure is the fully-qualified name of the ReservationService's
	// CostReducer RPC.
	ReservationServiceCostReducerProcedure = "/api.reservation.ReservationService/CostReducer"
	// ReservationServiceGetAllPendingProcedure is the fully-qualified name of the ReservationService's
	// GetAllPending RPC.
	ReservationServiceGetAllPendingProcedure = "/api.reservation.ReservationService/GetAllPending"
	// ReservationServiceAllSortedReservationsProcedure is the fully-qualified name of the
	// ReservationService's AllSortedReservations RPC.
	ReservationServiceAllSortedReservationsProcedure = "/api.reservation.ReservationService/AllSortedReservations"
)

// ReservationServiceClient is a client for the api.reservation.ReservationService service.
type ReservationServiceClient interface {
	GetAllReservations(context.Context, *connect.Request[reservation.GetAllReservationsRequest]) (*connect.Response[reservation.AllReservationsResponse], error)
	GetReservation(context.Context, *connect.Request[reservation.GetReservationRequest]) (*connect.Response[reservation.FullReservation], error)
	RequestCount(context.Context, *connect.Request[reservation.RequestCountRequest]) (*connect.Response[reservation.RequestCountResponse], error)
	GetRequestsThisWeek(context.Context, *connect.Request[reservation.GetRequestsThisWeekRequest]) (*connect.Response[reservation.RequestThisWeekResponse], error)
	CreateReservation(context.Context, *connect.Request[reservation.CreateReservationRequest]) (*connect.Response[reservation.CreateReservationResponse], error)
	UpdateReservation(context.Context, *connect.Request[reservation.UpdateReservationRequest]) (*connect.Response[reservation.UpdateReservationResponse], error)
	UpdateReservationStatus(context.Context, *connect.Request[reservation.UpdateReservationStatusRequest]) (*connect.Response[reservation.UpdateReservationResponse], error)
	DeleteReservation(context.Context, *connect.Request[reservation.DeleteReservationRequest]) (*connect.Response[reservation.DeleteReservationResponse], error)
	UserReservations(context.Context, *connect.Request[reservation.UserReservationsRequest]) (*connect.Response[reservation.UserReservationsResponse], error)
	CreateReservationDates(context.Context, *connect.Request[reservation.CreateReservationDatesRequest]) (*connect.Response[reservation.CreateReservationDatesResponse], error)
	UpdateReservationDates(context.Context, *connect.Request[reservation.UpdateReservationDatesRequest]) (*connect.Response[reservation.UpdateReservationDatesResponse], error)
	UpdateReservationDatesStatus(context.Context, *connect.Request[reservation.UpdateReservationDatesStatusRequest]) (*connect.Response[reservation.UpdateReservationDatesStatusResponse], error)
	DeleteReservationDates(context.Context, *connect.Request[reservation.DeleteReservationDatesRequest]) (*connect.Response[reservation.DeleteReservationDatesResponse], error)
	CreateReservationFee(context.Context, *connect.Request[reservation.CreateReservationFeeRequest]) (*connect.Response[reservation.CreateReservationFeeResponse], error)
	UpdateReservationFee(context.Context, *connect.Request[reservation.UpdateReservationFeeRequest]) (*connect.Response[reservation.UpdateReservationFeeResponse], error)
	DeleteReservationFee(context.Context, *connect.Request[reservation.DeleteReservationFeeRequest]) (*connect.Response[reservation.DeleteReservationFeeResponse], error)
	CostReducer(context.Context, *connect.Request[reservation.CostReducerRequest]) (*connect.Response[reservation.CostReducerResponse], error)
	GetAllPending(context.Context, *connect.Request[reservation.GetAllReservationsRequest]) (*connect.Response[reservation.AllPendingResponse], error)
	AllSortedReservations(context.Context, *connect.Request[reservation.GetAllReservationsRequest]) (*connect.Response[reservation.AllSortedResponse], error)
}

// NewReservationServiceClient constructs a client for the api.reservation.ReservationService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewReservationServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ReservationServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	reservationServiceMethods := reservation.File_proto_reservation_reservation_proto.Services().ByName("ReservationService").Methods()
	return &reservationServiceClient{
		getAllReservations: connect.NewClient[reservation.GetAllReservationsRequest, reservation.AllReservationsResponse](
			httpClient,
			baseURL+ReservationServiceGetAllReservationsProcedure,
			connect.WithSchema(reservationServiceMethods.ByName("GetAllReservations")),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		getReservation: connect.NewClient[reservation.GetReservationRequest, reservation.FullReservation](
			httpClient,
			baseURL+ReservationServiceGetReservationProcedure,
			connect.WithSchema(reservationServiceMethods.ByName("GetReservation")),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		requestCount: connect.NewClient[reservation.RequestCountRequest, reservation.RequestCountResponse](
			httpClient,
			baseURL+ReservationServiceRequestCountProcedure,
			connect.WithSchema(reservationServiceMethods.ByName("RequestCount")),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		getRequestsThisWeek: connect.NewClient[reservation.GetRequestsThisWeekRequest, reservation.RequestThisWeekResponse](
			httpClient,
			baseURL+ReservationServiceGetRequestsThisWeekProcedure,
			connect.WithSchema(reservationServiceMethods.ByName("GetRequestsThisWeek")),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		createReservation: connect.NewClient[reservation.CreateReservationRequest, reservation.CreateReservationResponse](
			httpClient,
			baseURL+ReservationServiceCreateReservationProcedure,
			connect.WithSchema(reservationServiceMethods.ByName("CreateReservation")),
			connect.WithClientOptions(opts...),
		),
		updateReservation: connect.NewClient[reservation.UpdateReservationRequest, reservation.UpdateReservationResponse](
			httpClient,
			baseURL+ReservationServiceUpdateReservationProcedure,
			connect.WithSchema(reservationServiceMethods.ByName("UpdateReservation")),
			connect.WithClientOptions(opts...),
		),
		updateReservationStatus: connect.NewClient[reservation.UpdateReservationStatusRequest, reservation.UpdateReservationResponse](
			httpClient,
			baseURL+ReservationServiceUpdateReservationStatusProcedure,
			connect.WithSchema(reservationServiceMethods.ByName("UpdateReservationStatus")),
			connect.WithClientOptions(opts...),
		),
		deleteReservation: connect.NewClient[reservation.DeleteReservationRequest, reservation.DeleteReservationResponse](
			httpClient,
			baseURL+ReservationServiceDeleteReservationProcedure,
			connect.WithSchema(reservationServiceMethods.ByName("DeleteReservation")),
			connect.WithClientOptions(opts...),
		),
		userReservations: connect.NewClient[reservation.UserReservationsRequest, reservation.UserReservationsResponse](
			httpClient,
			baseURL+ReservationServiceUserReservationsProcedure,
			connect.WithSchema(reservationServiceMethods.ByName("UserReservations")),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		createReservationDates: connect.NewClient[reservation.CreateReservationDatesRequest, reservation.CreateReservationDatesResponse](
			httpClient,
			baseURL+ReservationServiceCreateReservationDatesProcedure,
			connect.WithSchema(reservationServiceMethods.ByName("CreateReservationDates")),
			connect.WithClientOptions(opts...),
		),
		updateReservationDates: connect.NewClient[reservation.UpdateReservationDatesRequest, reservation.UpdateReservationDatesResponse](
			httpClient,
			baseURL+ReservationServiceUpdateReservationDatesProcedure,
			connect.WithSchema(reservationServiceMethods.ByName("UpdateReservationDates")),
			connect.WithClientOptions(opts...),
		),
		updateReservationDatesStatus: connect.NewClient[reservation.UpdateReservationDatesStatusRequest, reservation.UpdateReservationDatesStatusResponse](
			httpClient,
			baseURL+ReservationServiceUpdateReservationDatesStatusProcedure,
			connect.WithSchema(reservationServiceMethods.ByName("UpdateReservationDatesStatus")),
			connect.WithClientOptions(opts...),
		),
		deleteReservationDates: connect.NewClient[reservation.DeleteReservationDatesRequest, reservation.DeleteReservationDatesResponse](
			httpClient,
			baseURL+ReservationServiceDeleteReservationDatesProcedure,
			connect.WithSchema(reservationServiceMethods.ByName("DeleteReservationDates")),
			connect.WithClientOptions(opts...),
		),
		createReservationFee: connect.NewClient[reservation.CreateReservationFeeRequest, reservation.CreateReservationFeeResponse](
			httpClient,
			baseURL+ReservationServiceCreateReservationFeeProcedure,
			connect.WithSchema(reservationServiceMethods.ByName("CreateReservationFee")),
			connect.WithClientOptions(opts...),
		),
		updateReservationFee: connect.NewClient[reservation.UpdateReservationFeeRequest, reservation.UpdateReservationFeeResponse](
			httpClient,
			baseURL+ReservationServiceUpdateReservationFeeProcedure,
			connect.WithSchema(reservationServiceMethods.ByName("UpdateReservationFee")),
			connect.WithClientOptions(opts...),
		),
		deleteReservationFee: connect.NewClient[reservation.DeleteReservationFeeRequest, reservation.DeleteReservationFeeResponse](
			httpClient,
			baseURL+ReservationServiceDeleteReservationFeeProcedure,
			connect.WithSchema(reservationServiceMethods.ByName("DeleteReservationFee")),
			connect.WithClientOptions(opts...),
		),
		costReducer: connect.NewClient[reservation.CostReducerRequest, reservation.CostReducerResponse](
			httpClient,
			baseURL+ReservationServiceCostReducerProcedure,
			connect.WithSchema(reservationServiceMethods.ByName("CostReducer")),
			connect.WithClientOptions(opts...),
		),
		getAllPending: connect.NewClient[reservation.GetAllReservationsRequest, reservation.AllPendingResponse](
			httpClient,
			baseURL+ReservationServiceGetAllPendingProcedure,
			connect.WithSchema(reservationServiceMethods.ByName("GetAllPending")),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		allSortedReservations: connect.NewClient[reservation.GetAllReservationsRequest, reservation.AllSortedResponse](
			httpClient,
			baseURL+ReservationServiceAllSortedReservationsProcedure,
			connect.WithSchema(reservationServiceMethods.ByName("AllSortedReservations")),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
	}
}

// reservationServiceClient implements ReservationServiceClient.
type reservationServiceClient struct {
	getAllReservations           *connect.Client[reservation.GetAllReservationsRequest, reservation.AllReservationsResponse]
	getReservation               *connect.Client[reservation.GetReservationRequest, reservation.FullReservation]
	requestCount                 *connect.Client[reservation.RequestCountRequest, reservation.RequestCountResponse]
	getRequestsThisWeek          *connect.Client[reservation.GetRequestsThisWeekRequest, reservation.RequestThisWeekResponse]
	createReservation            *connect.Client[reservation.CreateReservationRequest, reservation.CreateReservationResponse]
	updateReservation            *connect.Client[reservation.UpdateReservationRequest, reservation.UpdateReservationResponse]
	updateReservationStatus      *connect.Client[reservation.UpdateReservationStatusRequest, reservation.UpdateReservationResponse]
	deleteReservation            *connect.Client[reservation.DeleteReservationRequest, reservation.DeleteReservationResponse]
	userReservations             *connect.Client[reservation.UserReservationsRequest, reservation.UserReservationsResponse]
	createReservationDates       *connect.Client[reservation.CreateReservationDatesRequest, reservation.CreateReservationDatesResponse]
	updateReservationDates       *connect.Client[reservation.UpdateReservationDatesRequest, reservation.UpdateReservationDatesResponse]
	updateReservationDatesStatus *connect.Client[reservation.UpdateReservationDatesStatusRequest, reservation.UpdateReservationDatesStatusResponse]
	deleteReservationDates       *connect.Client[reservation.DeleteReservationDatesRequest, reservation.DeleteReservationDatesResponse]
	createReservationFee         *connect.Client[reservation.CreateReservationFeeRequest, reservation.CreateReservationFeeResponse]
	updateReservationFee         *connect.Client[reservation.UpdateReservationFeeRequest, reservation.UpdateReservationFeeResponse]
	deleteReservationFee         *connect.Client[reservation.DeleteReservationFeeRequest, reservation.DeleteReservationFeeResponse]
	costReducer                  *connect.Client[reservation.CostReducerRequest, reservation.CostReducerResponse]
	getAllPending                *connect.Client[reservation.GetAllReservationsRequest, reservation.AllPendingResponse]
	allSortedReservations        *connect.Client[reservation.GetAllReservationsRequest, reservation.AllSortedResponse]
}

// GetAllReservations calls api.reservation.ReservationService.GetAllReservations.
func (c *reservationServiceClient) GetAllReservations(ctx context.Context, req *connect.Request[reservation.GetAllReservationsRequest]) (*connect.Response[reservation.AllReservationsResponse], error) {
	return c.getAllReservations.CallUnary(ctx, req)
}

// GetReservation calls api.reservation.ReservationService.GetReservation.
func (c *reservationServiceClient) GetReservation(ctx context.Context, req *connect.Request[reservation.GetReservationRequest]) (*connect.Response[reservation.FullReservation], error) {
	return c.getReservation.CallUnary(ctx, req)
}

// RequestCount calls api.reservation.ReservationService.RequestCount.
func (c *reservationServiceClient) RequestCount(ctx context.Context, req *connect.Request[reservation.RequestCountRequest]) (*connect.Response[reservation.RequestCountResponse], error) {
	return c.requestCount.CallUnary(ctx, req)
}

// GetRequestsThisWeek calls api.reservation.ReservationService.GetRequestsThisWeek.
func (c *reservationServiceClient) GetRequestsThisWeek(ctx context.Context, req *connect.Request[reservation.GetRequestsThisWeekRequest]) (*connect.Response[reservation.RequestThisWeekResponse], error) {
	return c.getRequestsThisWeek.CallUnary(ctx, req)
}

// CreateReservation calls api.reservation.ReservationService.CreateReservation.
func (c *reservationServiceClient) CreateReservation(ctx context.Context, req *connect.Request[reservation.CreateReservationRequest]) (*connect.Response[reservation.CreateReservationResponse], error) {
	return c.createReservation.CallUnary(ctx, req)
}

// UpdateReservation calls api.reservation.ReservationService.UpdateReservation.
func (c *reservationServiceClient) UpdateReservation(ctx context.Context, req *connect.Request[reservation.UpdateReservationRequest]) (*connect.Response[reservation.UpdateReservationResponse], error) {
	return c.updateReservation.CallUnary(ctx, req)
}

// UpdateReservationStatus calls api.reservation.ReservationService.UpdateReservationStatus.
func (c *reservationServiceClient) UpdateReservationStatus(ctx context.Context, req *connect.Request[reservation.UpdateReservationStatusRequest]) (*connect.Response[reservation.UpdateReservationResponse], error) {
	return c.updateReservationStatus.CallUnary(ctx, req)
}

// DeleteReservation calls api.reservation.ReservationService.DeleteReservation.
func (c *reservationServiceClient) DeleteReservation(ctx context.Context, req *connect.Request[reservation.DeleteReservationRequest]) (*connect.Response[reservation.DeleteReservationResponse], error) {
	return c.deleteReservation.CallUnary(ctx, req)
}

// UserReservations calls api.reservation.ReservationService.UserReservations.
func (c *reservationServiceClient) UserReservations(ctx context.Context, req *connect.Request[reservation.UserReservationsRequest]) (*connect.Response[reservation.UserReservationsResponse], error) {
	return c.userReservations.CallUnary(ctx, req)
}

// CreateReservationDates calls api.reservation.ReservationService.CreateReservationDates.
func (c *reservationServiceClient) CreateReservationDates(ctx context.Context, req *connect.Request[reservation.CreateReservationDatesRequest]) (*connect.Response[reservation.CreateReservationDatesResponse], error) {
	return c.createReservationDates.CallUnary(ctx, req)
}

// UpdateReservationDates calls api.reservation.ReservationService.UpdateReservationDates.
func (c *reservationServiceClient) UpdateReservationDates(ctx context.Context, req *connect.Request[reservation.UpdateReservationDatesRequest]) (*connect.Response[reservation.UpdateReservationDatesResponse], error) {
	return c.updateReservationDates.CallUnary(ctx, req)
}

// UpdateReservationDatesStatus calls
// api.reservation.ReservationService.UpdateReservationDatesStatus.
func (c *reservationServiceClient) UpdateReservationDatesStatus(ctx context.Context, req *connect.Request[reservation.UpdateReservationDatesStatusRequest]) (*connect.Response[reservation.UpdateReservationDatesStatusResponse], error) {
	return c.updateReservationDatesStatus.CallUnary(ctx, req)
}

// DeleteReservationDates calls api.reservation.ReservationService.DeleteReservationDates.
func (c *reservationServiceClient) DeleteReservationDates(ctx context.Context, req *connect.Request[reservation.DeleteReservationDatesRequest]) (*connect.Response[reservation.DeleteReservationDatesResponse], error) {
	return c.deleteReservationDates.CallUnary(ctx, req)
}

// CreateReservationFee calls api.reservation.ReservationService.CreateReservationFee.
func (c *reservationServiceClient) CreateReservationFee(ctx context.Context, req *connect.Request[reservation.CreateReservationFeeRequest]) (*connect.Response[reservation.CreateReservationFeeResponse], error) {
	return c.createReservationFee.CallUnary(ctx, req)
}

// UpdateReservationFee calls api.reservation.ReservationService.UpdateReservationFee.
func (c *reservationServiceClient) UpdateReservationFee(ctx context.Context, req *connect.Request[reservation.UpdateReservationFeeRequest]) (*connect.Response[reservation.UpdateReservationFeeResponse], error) {
	return c.updateReservationFee.CallUnary(ctx, req)
}

// DeleteReservationFee calls api.reservation.ReservationService.DeleteReservationFee.
func (c *reservationServiceClient) DeleteReservationFee(ctx context.Context, req *connect.Request[reservation.DeleteReservationFeeRequest]) (*connect.Response[reservation.DeleteReservationFeeResponse], error) {
	return c.deleteReservationFee.CallUnary(ctx, req)
}

// CostReducer calls api.reservation.ReservationService.CostReducer.
func (c *reservationServiceClient) CostReducer(ctx context.Context, req *connect.Request[reservation.CostReducerRequest]) (*connect.Response[reservation.CostReducerResponse], error) {
	return c.costReducer.CallUnary(ctx, req)
}

// GetAllPending calls api.reservation.ReservationService.GetAllPending.
func (c *reservationServiceClient) GetAllPending(ctx context.Context, req *connect.Request[reservation.GetAllReservationsRequest]) (*connect.Response[reservation.AllPendingResponse], error) {
	return c.getAllPending.CallUnary(ctx, req)
}

// AllSortedReservations calls api.reservation.ReservationService.AllSortedReservations.
func (c *reservationServiceClient) AllSortedReservations(ctx context.Context, req *connect.Request[reservation.GetAllReservationsRequest]) (*connect.Response[reservation.AllSortedResponse], error) {
	return c.allSortedReservations.CallUnary(ctx, req)
}

// ReservationServiceHandler is an implementation of the api.reservation.ReservationService service.
type ReservationServiceHandler interface {
	GetAllReservations(context.Context, *connect.Request[reservation.GetAllReservationsRequest]) (*connect.Response[reservation.AllReservationsResponse], error)
	GetReservation(context.Context, *connect.Request[reservation.GetReservationRequest]) (*connect.Response[reservation.FullReservation], error)
	RequestCount(context.Context, *connect.Request[reservation.RequestCountRequest]) (*connect.Response[reservation.RequestCountResponse], error)
	GetRequestsThisWeek(context.Context, *connect.Request[reservation.GetRequestsThisWeekRequest]) (*connect.Response[reservation.RequestThisWeekResponse], error)
	CreateReservation(context.Context, *connect.Request[reservation.CreateReservationRequest]) (*connect.Response[reservation.CreateReservationResponse], error)
	UpdateReservation(context.Context, *connect.Request[reservation.UpdateReservationRequest]) (*connect.Response[reservation.UpdateReservationResponse], error)
	UpdateReservationStatus(context.Context, *connect.Request[reservation.UpdateReservationStatusRequest]) (*connect.Response[reservation.UpdateReservationResponse], error)
	DeleteReservation(context.Context, *connect.Request[reservation.DeleteReservationRequest]) (*connect.Response[reservation.DeleteReservationResponse], error)
	UserReservations(context.Context, *connect.Request[reservation.UserReservationsRequest]) (*connect.Response[reservation.UserReservationsResponse], error)
	CreateReservationDates(context.Context, *connect.Request[reservation.CreateReservationDatesRequest]) (*connect.Response[reservation.CreateReservationDatesResponse], error)
	UpdateReservationDates(context.Context, *connect.Request[reservation.UpdateReservationDatesRequest]) (*connect.Response[reservation.UpdateReservationDatesResponse], error)
	UpdateReservationDatesStatus(context.Context, *connect.Request[reservation.UpdateReservationDatesStatusRequest]) (*connect.Response[reservation.UpdateReservationDatesStatusResponse], error)
	DeleteReservationDates(context.Context, *connect.Request[reservation.DeleteReservationDatesRequest]) (*connect.Response[reservation.DeleteReservationDatesResponse], error)
	CreateReservationFee(context.Context, *connect.Request[reservation.CreateReservationFeeRequest]) (*connect.Response[reservation.CreateReservationFeeResponse], error)
	UpdateReservationFee(context.Context, *connect.Request[reservation.UpdateReservationFeeRequest]) (*connect.Response[reservation.UpdateReservationFeeResponse], error)
	DeleteReservationFee(context.Context, *connect.Request[reservation.DeleteReservationFeeRequest]) (*connect.Response[reservation.DeleteReservationFeeResponse], error)
	CostReducer(context.Context, *connect.Request[reservation.CostReducerRequest]) (*connect.Response[reservation.CostReducerResponse], error)
	GetAllPending(context.Context, *connect.Request[reservation.GetAllReservationsRequest]) (*connect.Response[reservation.AllPendingResponse], error)
	AllSortedReservations(context.Context, *connect.Request[reservation.GetAllReservationsRequest]) (*connect.Response[reservation.AllSortedResponse], error)
}

// NewReservationServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewReservationServiceHandler(svc ReservationServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	reservationServiceMethods := reservation.File_proto_reservation_reservation_proto.Services().ByName("ReservationService").Methods()
	reservationServiceGetAllReservationsHandler := connect.NewUnaryHandler(
		ReservationServiceGetAllReservationsProcedure,
		svc.GetAllReservations,
		connect.WithSchema(reservationServiceMethods.ByName("GetAllReservations")),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	reservationServiceGetReservationHandler := connect.NewUnaryHandler(
		ReservationServiceGetReservationProcedure,
		svc.GetReservation,
		connect.WithSchema(reservationServiceMethods.ByName("GetReservation")),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	reservationServiceRequestCountHandler := connect.NewUnaryHandler(
		ReservationServiceRequestCountProcedure,
		svc.RequestCount,
		connect.WithSchema(reservationServiceMethods.ByName("RequestCount")),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	reservationServiceGetRequestsThisWeekHandler := connect.NewUnaryHandler(
		ReservationServiceGetRequestsThisWeekProcedure,
		svc.GetRequestsThisWeek,
		connect.WithSchema(reservationServiceMethods.ByName("GetRequestsThisWeek")),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	reservationServiceCreateReservationHandler := connect.NewUnaryHandler(
		ReservationServiceCreateReservationProcedure,
		svc.CreateReservation,
		connect.WithSchema(reservationServiceMethods.ByName("CreateReservation")),
		connect.WithHandlerOptions(opts...),
	)
	reservationServiceUpdateReservationHandler := connect.NewUnaryHandler(
		ReservationServiceUpdateReservationProcedure,
		svc.UpdateReservation,
		connect.WithSchema(reservationServiceMethods.ByName("UpdateReservation")),
		connect.WithHandlerOptions(opts...),
	)
	reservationServiceUpdateReservationStatusHandler := connect.NewUnaryHandler(
		ReservationServiceUpdateReservationStatusProcedure,
		svc.UpdateReservationStatus,
		connect.WithSchema(reservationServiceMethods.ByName("UpdateReservationStatus")),
		connect.WithHandlerOptions(opts...),
	)
	reservationServiceDeleteReservationHandler := connect.NewUnaryHandler(
		ReservationServiceDeleteReservationProcedure,
		svc.DeleteReservation,
		connect.WithSchema(reservationServiceMethods.ByName("DeleteReservation")),
		connect.WithHandlerOptions(opts...),
	)
	reservationServiceUserReservationsHandler := connect.NewUnaryHandler(
		ReservationServiceUserReservationsProcedure,
		svc.UserReservations,
		connect.WithSchema(reservationServiceMethods.ByName("UserReservations")),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	reservationServiceCreateReservationDatesHandler := connect.NewUnaryHandler(
		ReservationServiceCreateReservationDatesProcedure,
		svc.CreateReservationDates,
		connect.WithSchema(reservationServiceMethods.ByName("CreateReservationDates")),
		connect.WithHandlerOptions(opts...),
	)
	reservationServiceUpdateReservationDatesHandler := connect.NewUnaryHandler(
		ReservationServiceUpdateReservationDatesProcedure,
		svc.UpdateReservationDates,
		connect.WithSchema(reservationServiceMethods.ByName("UpdateReservationDates")),
		connect.WithHandlerOptions(opts...),
	)
	reservationServiceUpdateReservationDatesStatusHandler := connect.NewUnaryHandler(
		ReservationServiceUpdateReservationDatesStatusProcedure,
		svc.UpdateReservationDatesStatus,
		connect.WithSchema(reservationServiceMethods.ByName("UpdateReservationDatesStatus")),
		connect.WithHandlerOptions(opts...),
	)
	reservationServiceDeleteReservationDatesHandler := connect.NewUnaryHandler(
		ReservationServiceDeleteReservationDatesProcedure,
		svc.DeleteReservationDates,
		connect.WithSchema(reservationServiceMethods.ByName("DeleteReservationDates")),
		connect.WithHandlerOptions(opts...),
	)
	reservationServiceCreateReservationFeeHandler := connect.NewUnaryHandler(
		ReservationServiceCreateReservationFeeProcedure,
		svc.CreateReservationFee,
		connect.WithSchema(reservationServiceMethods.ByName("CreateReservationFee")),
		connect.WithHandlerOptions(opts...),
	)
	reservationServiceUpdateReservationFeeHandler := connect.NewUnaryHandler(
		ReservationServiceUpdateReservationFeeProcedure,
		svc.UpdateReservationFee,
		connect.WithSchema(reservationServiceMethods.ByName("UpdateReservationFee")),
		connect.WithHandlerOptions(opts...),
	)
	reservationServiceDeleteReservationFeeHandler := connect.NewUnaryHandler(
		ReservationServiceDeleteReservationFeeProcedure,
		svc.DeleteReservationFee,
		connect.WithSchema(reservationServiceMethods.ByName("DeleteReservationFee")),
		connect.WithHandlerOptions(opts...),
	)
	reservationServiceCostReducerHandler := connect.NewUnaryHandler(
		ReservationServiceCostReducerProcedure,
		svc.CostReducer,
		connect.WithSchema(reservationServiceMethods.ByName("CostReducer")),
		connect.WithHandlerOptions(opts...),
	)
	reservationServiceGetAllPendingHandler := connect.NewUnaryHandler(
		ReservationServiceGetAllPendingProcedure,
		svc.GetAllPending,
		connect.WithSchema(reservationServiceMethods.ByName("GetAllPending")),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	reservationServiceAllSortedReservationsHandler := connect.NewUnaryHandler(
		ReservationServiceAllSortedReservationsProcedure,
		svc.AllSortedReservations,
		connect.WithSchema(reservationServiceMethods.ByName("AllSortedReservations")),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	return "/api.reservation.ReservationService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ReservationServiceGetAllReservationsProcedure:
			reservationServiceGetAllReservationsHandler.ServeHTTP(w, r)
		case ReservationServiceGetReservationProcedure:
			reservationServiceGetReservationHandler.ServeHTTP(w, r)
		case ReservationServiceRequestCountProcedure:
			reservationServiceRequestCountHandler.ServeHTTP(w, r)
		case ReservationServiceGetRequestsThisWeekProcedure:
			reservationServiceGetRequestsThisWeekHandler.ServeHTTP(w, r)
		case ReservationServiceCreateReservationProcedure:
			reservationServiceCreateReservationHandler.ServeHTTP(w, r)
		case ReservationServiceUpdateReservationProcedure:
			reservationServiceUpdateReservationHandler.ServeHTTP(w, r)
		case ReservationServiceUpdateReservationStatusProcedure:
			reservationServiceUpdateReservationStatusHandler.ServeHTTP(w, r)
		case ReservationServiceDeleteReservationProcedure:
			reservationServiceDeleteReservationHandler.ServeHTTP(w, r)
		case ReservationServiceUserReservationsProcedure:
			reservationServiceUserReservationsHandler.ServeHTTP(w, r)
		case ReservationServiceCreateReservationDatesProcedure:
			reservationServiceCreateReservationDatesHandler.ServeHTTP(w, r)
		case ReservationServiceUpdateReservationDatesProcedure:
			reservationServiceUpdateReservationDatesHandler.ServeHTTP(w, r)
		case ReservationServiceUpdateReservationDatesStatusProcedure:
			reservationServiceUpdateReservationDatesStatusHandler.ServeHTTP(w, r)
		case ReservationServiceDeleteReservationDatesProcedure:
			reservationServiceDeleteReservationDatesHandler.ServeHTTP(w, r)
		case ReservationServiceCreateReservationFeeProcedure:
			reservationServiceCreateReservationFeeHandler.ServeHTTP(w, r)
		case ReservationServiceUpdateReservationFeeProcedure:
			reservationServiceUpdateReservationFeeHandler.ServeHTTP(w, r)
		case ReservationServiceDeleteReservationFeeProcedure:
			reservationServiceDeleteReservationFeeHandler.ServeHTTP(w, r)
		case ReservationServiceCostReducerProcedure:
			reservationServiceCostReducerHandler.ServeHTTP(w, r)
		case ReservationServiceGetAllPendingProcedure:
			reservationServiceGetAllPendingHandler.ServeHTTP(w, r)
		case ReservationServiceAllSortedReservationsProcedure:
			reservationServiceAllSortedReservationsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedReservationServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedReservationServiceHandler struct{}

func (UnimplementedReservationServiceHandler) GetAllReservations(context.Context, *connect.Request[reservation.GetAllReservationsRequest]) (*connect.Response[reservation.AllReservationsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.reservation.ReservationService.GetAllReservations is not implemented"))
}

func (UnimplementedReservationServiceHandler) GetReservation(context.Context, *connect.Request[reservation.GetReservationRequest]) (*connect.Response[reservation.FullReservation], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.reservation.ReservationService.GetReservation is not implemented"))
}

func (UnimplementedReservationServiceHandler) RequestCount(context.Context, *connect.Request[reservation.RequestCountRequest]) (*connect.Response[reservation.RequestCountResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.reservation.ReservationService.RequestCount is not implemented"))
}

func (UnimplementedReservationServiceHandler) GetRequestsThisWeek(context.Context, *connect.Request[reservation.GetRequestsThisWeekRequest]) (*connect.Response[reservation.RequestThisWeekResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.reservation.ReservationService.GetRequestsThisWeek is not implemented"))
}

func (UnimplementedReservationServiceHandler) CreateReservation(context.Context, *connect.Request[reservation.CreateReservationRequest]) (*connect.Response[reservation.CreateReservationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.reservation.ReservationService.CreateReservation is not implemented"))
}

func (UnimplementedReservationServiceHandler) UpdateReservation(context.Context, *connect.Request[reservation.UpdateReservationRequest]) (*connect.Response[reservation.UpdateReservationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.reservation.ReservationService.UpdateReservation is not implemented"))
}

func (UnimplementedReservationServiceHandler) UpdateReservationStatus(context.Context, *connect.Request[reservation.UpdateReservationStatusRequest]) (*connect.Response[reservation.UpdateReservationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.reservation.ReservationService.UpdateReservationStatus is not implemented"))
}

func (UnimplementedReservationServiceHandler) DeleteReservation(context.Context, *connect.Request[reservation.DeleteReservationRequest]) (*connect.Response[reservation.DeleteReservationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.reservation.ReservationService.DeleteReservation is not implemented"))
}

func (UnimplementedReservationServiceHandler) UserReservations(context.Context, *connect.Request[reservation.UserReservationsRequest]) (*connect.Response[reservation.UserReservationsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.reservation.ReservationService.UserReservations is not implemented"))
}

func (UnimplementedReservationServiceHandler) CreateReservationDates(context.Context, *connect.Request[reservation.CreateReservationDatesRequest]) (*connect.Response[reservation.CreateReservationDatesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.reservation.ReservationService.CreateReservationDates is not implemented"))
}

func (UnimplementedReservationServiceHandler) UpdateReservationDates(context.Context, *connect.Request[reservation.UpdateReservationDatesRequest]) (*connect.Response[reservation.UpdateReservationDatesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.reservation.ReservationService.UpdateReservationDates is not implemented"))
}

func (UnimplementedReservationServiceHandler) UpdateReservationDatesStatus(context.Context, *connect.Request[reservation.UpdateReservationDatesStatusRequest]) (*connect.Response[reservation.UpdateReservationDatesStatusResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.reservation.ReservationService.UpdateReservationDatesStatus is not implemented"))
}

func (UnimplementedReservationServiceHandler) DeleteReservationDates(context.Context, *connect.Request[reservation.DeleteReservationDatesRequest]) (*connect.Response[reservation.DeleteReservationDatesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.reservation.ReservationService.DeleteReservationDates is not implemented"))
}

func (UnimplementedReservationServiceHandler) CreateReservationFee(context.Context, *connect.Request[reservation.CreateReservationFeeRequest]) (*connect.Response[reservation.CreateReservationFeeResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.reservation.ReservationService.CreateReservationFee is not implemented"))
}

func (UnimplementedReservationServiceHandler) UpdateReservationFee(context.Context, *connect.Request[reservation.UpdateReservationFeeRequest]) (*connect.Response[reservation.UpdateReservationFeeResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.reservation.ReservationService.UpdateReservationFee is not implemented"))
}

func (UnimplementedReservationServiceHandler) DeleteReservationFee(context.Context, *connect.Request[reservation.DeleteReservationFeeRequest]) (*connect.Response[reservation.DeleteReservationFeeResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.reservation.ReservationService.DeleteReservationFee is not implemented"))
}

func (UnimplementedReservationServiceHandler) CostReducer(context.Context, *connect.Request[reservation.CostReducerRequest]) (*connect.Response[reservation.CostReducerResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.reservation.ReservationService.CostReducer is not implemented"))
}

func (UnimplementedReservationServiceHandler) GetAllPending(context.Context, *connect.Request[reservation.GetAllReservationsRequest]) (*connect.Response[reservation.AllPendingResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.reservation.ReservationService.GetAllPending is not implemented"))
}

func (UnimplementedReservationServiceHandler) AllSortedReservations(context.Context, *connect.Request[reservation.GetAllReservationsRequest]) (*connect.Response[reservation.AllSortedResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.reservation.ReservationService.AllSortedReservations is not implemented"))
}
