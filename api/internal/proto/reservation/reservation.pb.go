// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.1
// 	protoc        (unknown)
// source: proto/reservation/reservation.proto

package reservationservice

import (
	facilities "api/internal/proto/facilities"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Reservation struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Id             int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	UserId         string                 `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	EventName      string                 `protobuf:"bytes,3,opt,name=event_name,json=eventName,proto3" json:"event_name,omitempty"`
	FacilityId     int64                  `protobuf:"varint,4,opt,name=facility_id,json=facilityId,proto3" json:"facility_id,omitempty"`
	Approved       string                 `protobuf:"bytes,5,opt,name=approved,proto3" json:"approved,omitempty"`
	CreatedAt      string                 `protobuf:"bytes,6,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt      string                 `protobuf:"bytes,7,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	Details        *string                `protobuf:"bytes,8,opt,name=details,proto3,oneof" json:"details,omitempty"`
	Fees           string                 `protobuf:"bytes,9,opt,name=fees,proto3" json:"fees,omitempty"` // pgtype.Numeric as string
	Insurance      bool                   `protobuf:"varint,10,opt,name=insurance,proto3" json:"insurance,omitempty"`
	PrimaryContact *string                `protobuf:"bytes,11,opt,name=primary_contact,json=primaryContact,proto3,oneof" json:"primary_contact,omitempty"`
	DoorAccess     *bool                  `protobuf:"varint,12,opt,name=door_access,json=doorAccess,proto3,oneof" json:"door_access,omitempty"`
	DoorsDetails   *string                `protobuf:"bytes,13,opt,name=doors_details,json=doorsDetails,proto3,oneof" json:"doors_details,omitempty"`
	Name           *string                `protobuf:"bytes,14,opt,name=name,proto3,oneof" json:"name,omitempty"`
	People         *string                `protobuf:"bytes,15,opt,name=people,proto3,oneof" json:"people,omitempty"`
	TechDetails    *string                `protobuf:"bytes,16,opt,name=tech_details,json=techDetails,proto3,oneof" json:"tech_details,omitempty"`
	TechSupport    *bool                  `protobuf:"varint,17,opt,name=tech_support,json=techSupport,proto3,oneof" json:"tech_support,omitempty"`
	Phone          *string                `protobuf:"bytes,18,opt,name=phone,proto3,oneof" json:"phone,omitempty"`
	CategoryId     int64                  `protobuf:"varint,19,opt,name=category_id,json=categoryId,proto3" json:"category_id,omitempty"`
	TotalHours     *float64               `protobuf:"fixed64,20,opt,name=total_hours,json=totalHours,proto3,oneof" json:"total_hours,omitempty"`
	InPerson       bool                   `protobuf:"varint,21,opt,name=in_person,json=inPerson,proto3" json:"in_person,omitempty"`
	Paid           bool                   `protobuf:"varint,22,opt,name=paid,proto3" json:"paid,omitempty"`
	PaymentUrl     *string                `protobuf:"bytes,23,opt,name=payment_url,json=paymentUrl,proto3,oneof" json:"payment_url,omitempty"`
	PaymentLinkId  *string                `protobuf:"bytes,24,opt,name=payment_link_id,json=paymentLinkId,proto3,oneof" json:"payment_link_id,omitempty"`
	TicketMade     bool                   `protobuf:"varint,25,opt,name=ticket_made,json=ticketMade,proto3" json:"ticket_made,omitempty"`
	Conflicts      bool                   `protobuf:"varint,26,opt,name=conflicts,proto3" json:"conflicts,omitempty"`
	InsuranceLink  *string                `protobuf:"bytes,27,opt,name=insurance_link,json=insuranceLink,proto3,oneof" json:"insurance_link,omitempty"`
	CostOverride   string                 `protobuf:"bytes,28,opt,name=cost_override,json=costOverride,proto3" json:"cost_override,omitempty"` // pgtype.Numeric as string
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *Reservation) Reset() {
	*x = Reservation{}
	mi := &file_proto_reservation_reservation_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Reservation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Reservation) ProtoMessage() {}

func (x *Reservation) ProtoReflect() protoreflect.Message {
	mi := &file_proto_reservation_reservation_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Reservation.ProtoReflect.Descriptor instead.
func (*Reservation) Descriptor() ([]byte, []int) {
	return file_proto_reservation_reservation_proto_rawDescGZIP(), []int{0}
}

func (x *Reservation) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Reservation) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *Reservation) GetEventName() string {
	if x != nil {
		return x.EventName
	}
	return ""
}

func (x *Reservation) GetFacilityId() int64 {
	if x != nil {
		return x.FacilityId
	}
	return 0
}

func (x *Reservation) GetApproved() string {
	if x != nil {
		return x.Approved
	}
	return ""
}

func (x *Reservation) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *Reservation) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

func (x *Reservation) GetDetails() string {
	if x != nil && x.Details != nil {
		return *x.Details
	}
	return ""
}

func (x *Reservation) GetFees() string {
	if x != nil {
		return x.Fees
	}
	return ""
}

func (x *Reservation) GetInsurance() bool {
	if x != nil {
		return x.Insurance
	}
	return false
}

func (x *Reservation) GetPrimaryContact() string {
	if x != nil && x.PrimaryContact != nil {
		return *x.PrimaryContact
	}
	return ""
}

func (x *Reservation) GetDoorAccess() bool {
	if x != nil && x.DoorAccess != nil {
		return *x.DoorAccess
	}
	return false
}

func (x *Reservation) GetDoorsDetails() string {
	if x != nil && x.DoorsDetails != nil {
		return *x.DoorsDetails
	}
	return ""
}

func (x *Reservation) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *Reservation) GetPeople() string {
	if x != nil && x.People != nil {
		return *x.People
	}
	return ""
}

func (x *Reservation) GetTechDetails() string {
	if x != nil && x.TechDetails != nil {
		return *x.TechDetails
	}
	return ""
}

func (x *Reservation) GetTechSupport() bool {
	if x != nil && x.TechSupport != nil {
		return *x.TechSupport
	}
	return false
}

func (x *Reservation) GetPhone() string {
	if x != nil && x.Phone != nil {
		return *x.Phone
	}
	return ""
}

func (x *Reservation) GetCategoryId() int64 {
	if x != nil {
		return x.CategoryId
	}
	return 0
}

func (x *Reservation) GetTotalHours() float64 {
	if x != nil && x.TotalHours != nil {
		return *x.TotalHours
	}
	return 0
}

func (x *Reservation) GetInPerson() bool {
	if x != nil {
		return x.InPerson
	}
	return false
}

func (x *Reservation) GetPaid() bool {
	if x != nil {
		return x.Paid
	}
	return false
}

func (x *Reservation) GetPaymentUrl() string {
	if x != nil && x.PaymentUrl != nil {
		return *x.PaymentUrl
	}
	return ""
}

func (x *Reservation) GetPaymentLinkId() string {
	if x != nil && x.PaymentLinkId != nil {
		return *x.PaymentLinkId
	}
	return ""
}

func (x *Reservation) GetTicketMade() bool {
	if x != nil {
		return x.TicketMade
	}
	return false
}

func (x *Reservation) GetConflicts() bool {
	if x != nil {
		return x.Conflicts
	}
	return false
}

func (x *Reservation) GetInsuranceLink() string {
	if x != nil && x.InsuranceLink != nil {
		return *x.InsuranceLink
	}
	return ""
}

func (x *Reservation) GetCostOverride() string {
	if x != nil {
		return x.CostOverride
	}
	return ""
}

type ReservationDate struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	StartDate     string                 `protobuf:"bytes,2,opt,name=start_date,json=startDate,proto3" json:"start_date,omitempty"` // "YYYY-MM-DD"
	EndDate       string                 `protobuf:"bytes,3,opt,name=end_date,json=endDate,proto3" json:"end_date,omitempty"`       // "YYYY-MM-DD"
	StartTime     string                 `protobuf:"bytes,4,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"` // "HH:MM"
	EndTime       string                 `protobuf:"bytes,5,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`       // "HH:MM"
	ReservationId int64                  `protobuf:"varint,6,opt,name=reservation_id,json=reservationId,proto3" json:"reservation_id,omitempty"`
	Approved      string                 `protobuf:"bytes,7,opt,name=approved,proto3" json:"approved,omitempty"`
	GcalEventid   *string                `protobuf:"bytes,8,opt,name=gcal_eventid,json=gcalEventid,proto3,oneof" json:"gcal_eventid,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReservationDate) Reset() {
	*x = ReservationDate{}
	mi := &file_proto_reservation_reservation_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReservationDate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReservationDate) ProtoMessage() {}

func (x *ReservationDate) ProtoReflect() protoreflect.Message {
	mi := &file_proto_reservation_reservation_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReservationDate.ProtoReflect.Descriptor instead.
func (*ReservationDate) Descriptor() ([]byte, []int) {
	return file_proto_reservation_reservation_proto_rawDescGZIP(), []int{1}
}

func (x *ReservationDate) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ReservationDate) GetStartDate() string {
	if x != nil {
		return x.StartDate
	}
	return ""
}

func (x *ReservationDate) GetEndDate() string {
	if x != nil {
		return x.EndDate
	}
	return ""
}

func (x *ReservationDate) GetStartTime() string {
	if x != nil {
		return x.StartTime
	}
	return ""
}

func (x *ReservationDate) GetEndTime() string {
	if x != nil {
		return x.EndTime
	}
	return ""
}

func (x *ReservationDate) GetReservationId() int64 {
	if x != nil {
		return x.ReservationId
	}
	return 0
}

func (x *ReservationDate) GetApproved() string {
	if x != nil {
		return x.Approved
	}
	return ""
}

func (x *ReservationDate) GetGcalEventid() string {
	if x != nil && x.GcalEventid != nil {
		return *x.GcalEventid
	}
	return ""
}

type ReservationFee struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Id             int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	AdditionalFees string                 `protobuf:"bytes,2,opt,name=additional_fees,json=additionalFees,proto3" json:"additional_fees,omitempty"` // pgtype.Numeric as string
	FeesType       *string                `protobuf:"bytes,3,opt,name=fees_type,json=feesType,proto3,oneof" json:"fees_type,omitempty"`
	ReservationId  int64                  `protobuf:"varint,4,opt,name=reservation_id,json=reservationId,proto3" json:"reservation_id,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *ReservationFee) Reset() {
	*x = ReservationFee{}
	mi := &file_proto_reservation_reservation_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReservationFee) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReservationFee) ProtoMessage() {}

func (x *ReservationFee) ProtoReflect() protoreflect.Message {
	mi := &file_proto_reservation_reservation_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReservationFee.ProtoReflect.Descriptor instead.
func (*ReservationFee) Descriptor() ([]byte, []int) {
	return file_proto_reservation_reservation_proto_rawDescGZIP(), []int{2}
}

func (x *ReservationFee) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ReservationFee) GetAdditionalFees() string {
	if x != nil {
		return x.AdditionalFees
	}
	return ""
}

func (x *ReservationFee) GetFeesType() string {
	if x != nil && x.FeesType != nil {
		return *x.FeesType
	}
	return ""
}

func (x *ReservationFee) GetReservationId() int64 {
	if x != nil {
		return x.ReservationId
	}
	return 0
}

type FullReservation struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Reservation   *Reservation           `protobuf:"bytes,1,opt,name=reservation,proto3" json:"reservation,omitempty"`
	Dates         []*ReservationDate     `protobuf:"bytes,2,rep,name=dates,proto3" json:"dates,omitempty"`
	Fees          []*ReservationFee      `protobuf:"bytes,3,rep,name=fees,proto3" json:"fees,omitempty"`
	Facility      *facilities.Facility   `protobuf:"bytes,4,opt,name=facility,proto3" json:"facility,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FullReservation) Reset() {
	*x = FullReservation{}
	mi := &file_proto_reservation_reservation_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FullReservation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FullReservation) ProtoMessage() {}

func (x *FullReservation) ProtoReflect() protoreflect.Message {
	mi := &file_proto_reservation_reservation_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FullReservation.ProtoReflect.Descriptor instead.
func (*FullReservation) Descriptor() ([]byte, []int) {
	return file_proto_reservation_reservation_proto_rawDescGZIP(), []int{3}
}

func (x *FullReservation) GetReservation() *Reservation {
	if x != nil {
		return x.Reservation
	}
	return nil
}

func (x *FullReservation) GetDates() []*ReservationDate {
	if x != nil {
		return x.Dates
	}
	return nil
}

func (x *FullReservation) GetFees() []*ReservationFee {
	if x != nil {
		return x.Fees
	}
	return nil
}

func (x *FullReservation) GetFacility() *facilities.Facility {
	if x != nil {
		return x.Facility
	}
	return nil
}

type AllReservationsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Reservations  []*FullReservation     `protobuf:"bytes,1,rep,name=reservations,proto3" json:"reservations,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AllReservationsResponse) Reset() {
	*x = AllReservationsResponse{}
	mi := &file_proto_reservation_reservation_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AllReservationsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AllReservationsResponse) ProtoMessage() {}

func (x *AllReservationsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_reservation_reservation_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AllReservationsResponse.ProtoReflect.Descriptor instead.
func (*AllReservationsResponse) Descriptor() ([]byte, []int) {
	return file_proto_reservation_reservation_proto_rawDescGZIP(), []int{4}
}

func (x *AllReservationsResponse) GetReservations() []*FullReservation {
	if x != nil {
		return x.Reservations
	}
	return nil
}

type RequestThisWeekResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Reservations  []*FullReservation     `protobuf:"bytes,1,rep,name=reservations,proto3" json:"reservations,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RequestThisWeekResponse) Reset() {
	*x = RequestThisWeekResponse{}
	mi := &file_proto_reservation_reservation_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RequestThisWeekResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestThisWeekResponse) ProtoMessage() {}

func (x *RequestThisWeekResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_reservation_reservation_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestThisWeekResponse.ProtoReflect.Descriptor instead.
func (*RequestThisWeekResponse) Descriptor() ([]byte, []int) {
	return file_proto_reservation_reservation_proto_rawDescGZIP(), []int{5}
}

func (x *RequestThisWeekResponse) GetReservations() []*FullReservation {
	if x != nil {
		return x.Reservations
	}
	return nil
}

type ApprovedReservationsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Reservations  []*FullReservation     `protobuf:"bytes,1,rep,name=reservations,proto3" json:"reservations,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ApprovedReservationsResponse) Reset() {
	*x = ApprovedReservationsResponse{}
	mi := &file_proto_reservation_reservation_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ApprovedReservationsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApprovedReservationsResponse) ProtoMessage() {}

func (x *ApprovedReservationsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_reservation_reservation_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApprovedReservationsResponse.ProtoReflect.Descriptor instead.
func (*ApprovedReservationsResponse) Descriptor() ([]byte, []int) {
	return file_proto_reservation_reservation_proto_rawDescGZIP(), []int{6}
}

func (x *ApprovedReservationsResponse) GetReservations() []*FullReservation {
	if x != nil {
		return x.Reservations
	}
	return nil
}

type PendingReservationsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Reservations  []*FullReservation     `protobuf:"bytes,1,rep,name=reservations,proto3" json:"reservations,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PendingReservationsResponse) Reset() {
	*x = PendingReservationsResponse{}
	mi := &file_proto_reservation_reservation_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PendingReservationsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PendingReservationsResponse) ProtoMessage() {}

func (x *PendingReservationsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_reservation_reservation_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PendingReservationsResponse.ProtoReflect.Descriptor instead.
func (*PendingReservationsResponse) Descriptor() ([]byte, []int) {
	return file_proto_reservation_reservation_proto_rawDescGZIP(), []int{7}
}

func (x *PendingReservationsResponse) GetReservations() []*FullReservation {
	if x != nil {
		return x.Reservations
	}
	return nil
}

type UserReservationsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Reservations  []*FullReservation     `protobuf:"bytes,1,rep,name=reservations,proto3" json:"reservations,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UserReservationsResponse) Reset() {
	*x = UserReservationsResponse{}
	mi := &file_proto_reservation_reservation_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserReservationsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserReservationsResponse) ProtoMessage() {}

func (x *UserReservationsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_reservation_reservation_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserReservationsResponse.ProtoReflect.Descriptor instead.
func (*UserReservationsResponse) Descriptor() ([]byte, []int) {
	return file_proto_reservation_reservation_proto_rawDescGZIP(), []int{8}
}

func (x *UserReservationsResponse) GetReservations() []*FullReservation {
	if x != nil {
		return x.Reservations
	}
	return nil
}

type GetAllReservationsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetAllReservationsRequest) Reset() {
	*x = GetAllReservationsRequest{}
	mi := &file_proto_reservation_reservation_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAllReservationsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllReservationsRequest) ProtoMessage() {}

func (x *GetAllReservationsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_reservation_reservation_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllReservationsRequest.ProtoReflect.Descriptor instead.
func (*GetAllReservationsRequest) Descriptor() ([]byte, []int) {
	return file_proto_reservation_reservation_proto_rawDescGZIP(), []int{9}
}

type GetReservationRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetReservationRequest) Reset() {
	*x = GetReservationRequest{}
	mi := &file_proto_reservation_reservation_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetReservationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetReservationRequest) ProtoMessage() {}

func (x *GetReservationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_reservation_reservation_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetReservationRequest.ProtoReflect.Descriptor instead.
func (*GetReservationRequest) Descriptor() ([]byte, []int) {
	return file_proto_reservation_reservation_proto_rawDescGZIP(), []int{10}
}

func (x *GetReservationRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type RequestCountRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RequestCountRequest) Reset() {
	*x = RequestCountRequest{}
	mi := &file_proto_reservation_reservation_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RequestCountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestCountRequest) ProtoMessage() {}

func (x *RequestCountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_reservation_reservation_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestCountRequest.ProtoReflect.Descriptor instead.
func (*RequestCountRequest) Descriptor() ([]byte, []int) {
	return file_proto_reservation_reservation_proto_rawDescGZIP(), []int{11}
}

type RequestCountResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Count         int64                  `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RequestCountResponse) Reset() {
	*x = RequestCountResponse{}
	mi := &file_proto_reservation_reservation_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RequestCountResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestCountResponse) ProtoMessage() {}

func (x *RequestCountResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_reservation_reservation_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestCountResponse.ProtoReflect.Descriptor instead.
func (*RequestCountResponse) Descriptor() ([]byte, []int) {
	return file_proto_reservation_reservation_proto_rawDescGZIP(), []int{12}
}

func (x *RequestCountResponse) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

type GetRequestsThisWeekRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetRequestsThisWeekRequest) Reset() {
	*x = GetRequestsThisWeekRequest{}
	mi := &file_proto_reservation_reservation_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetRequestsThisWeekRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRequestsThisWeekRequest) ProtoMessage() {}

func (x *GetRequestsThisWeekRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_reservation_reservation_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRequestsThisWeekRequest.ProtoReflect.Descriptor instead.
func (*GetRequestsThisWeekRequest) Descriptor() ([]byte, []int) {
	return file_proto_reservation_reservation_proto_rawDescGZIP(), []int{13}
}

type GetAllApprovedReservationsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetAllApprovedReservationsRequest) Reset() {
	*x = GetAllApprovedReservationsRequest{}
	mi := &file_proto_reservation_reservation_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAllApprovedReservationsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllApprovedReservationsRequest) ProtoMessage() {}

func (x *GetAllApprovedReservationsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_reservation_reservation_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllApprovedReservationsRequest.ProtoReflect.Descriptor instead.
func (*GetAllApprovedReservationsRequest) Descriptor() ([]byte, []int) {
	return file_proto_reservation_reservation_proto_rawDescGZIP(), []int{14}
}

type GetAllPendingReservationsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetAllPendingReservationsRequest) Reset() {
	*x = GetAllPendingReservationsRequest{}
	mi := &file_proto_reservation_reservation_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAllPendingReservationsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllPendingReservationsRequest) ProtoMessage() {}

func (x *GetAllPendingReservationsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_reservation_reservation_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllPendingReservationsRequest.ProtoReflect.Descriptor instead.
func (*GetAllPendingReservationsRequest) Descriptor() ([]byte, []int) {
	return file_proto_reservation_reservation_proto_rawDescGZIP(), []int{15}
}

type CreateReservationRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Reservation   *FullReservation       `protobuf:"bytes,1,opt,name=reservation,proto3" json:"reservation,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateReservationRequest) Reset() {
	*x = CreateReservationRequest{}
	mi := &file_proto_reservation_reservation_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateReservationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateReservationRequest) ProtoMessage() {}

func (x *CreateReservationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_reservation_reservation_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateReservationRequest.ProtoReflect.Descriptor instead.
func (*CreateReservationRequest) Descriptor() ([]byte, []int) {
	return file_proto_reservation_reservation_proto_rawDescGZIP(), []int{16}
}

func (x *CreateReservationRequest) GetReservation() *FullReservation {
	if x != nil {
		return x.Reservation
	}
	return nil
}

type CreateReservationResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateReservationResponse) Reset() {
	*x = CreateReservationResponse{}
	mi := &file_proto_reservation_reservation_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateReservationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateReservationResponse) ProtoMessage() {}

func (x *CreateReservationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_reservation_reservation_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateReservationResponse.ProtoReflect.Descriptor instead.
func (*CreateReservationResponse) Descriptor() ([]byte, []int) {
	return file_proto_reservation_reservation_proto_rawDescGZIP(), []int{17}
}

func (x *CreateReservationResponse) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type UpdateReservationRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Reservation   *FullReservation       `protobuf:"bytes,1,opt,name=reservation,proto3" json:"reservation,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateReservationRequest) Reset() {
	*x = UpdateReservationRequest{}
	mi := &file_proto_reservation_reservation_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateReservationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateReservationRequest) ProtoMessage() {}

func (x *UpdateReservationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_reservation_reservation_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateReservationRequest.ProtoReflect.Descriptor instead.
func (*UpdateReservationRequest) Descriptor() ([]byte, []int) {
	return file_proto_reservation_reservation_proto_rawDescGZIP(), []int{18}
}

func (x *UpdateReservationRequest) GetReservation() *FullReservation {
	if x != nil {
		return x.Reservation
	}
	return nil
}

type UpdateReservationResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateReservationResponse) Reset() {
	*x = UpdateReservationResponse{}
	mi := &file_proto_reservation_reservation_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateReservationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateReservationResponse) ProtoMessage() {}

func (x *UpdateReservationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_reservation_reservation_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateReservationResponse.ProtoReflect.Descriptor instead.
func (*UpdateReservationResponse) Descriptor() ([]byte, []int) {
	return file_proto_reservation_reservation_proto_rawDescGZIP(), []int{19}
}

type DeleteReservationRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteReservationRequest) Reset() {
	*x = DeleteReservationRequest{}
	mi := &file_proto_reservation_reservation_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteReservationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteReservationRequest) ProtoMessage() {}

func (x *DeleteReservationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_reservation_reservation_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteReservationRequest.ProtoReflect.Descriptor instead.
func (*DeleteReservationRequest) Descriptor() ([]byte, []int) {
	return file_proto_reservation_reservation_proto_rawDescGZIP(), []int{20}
}

func (x *DeleteReservationRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type DeleteReservationResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteReservationResponse) Reset() {
	*x = DeleteReservationResponse{}
	mi := &file_proto_reservation_reservation_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteReservationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteReservationResponse) ProtoMessage() {}

func (x *DeleteReservationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_reservation_reservation_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteReservationResponse.ProtoReflect.Descriptor instead.
func (*DeleteReservationResponse) Descriptor() ([]byte, []int) {
	return file_proto_reservation_reservation_proto_rawDescGZIP(), []int{21}
}

type UserReservationsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserId        string                 `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UserReservationsRequest) Reset() {
	*x = UserReservationsRequest{}
	mi := &file_proto_reservation_reservation_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserReservationsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserReservationsRequest) ProtoMessage() {}

func (x *UserReservationsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_reservation_reservation_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserReservationsRequest.ProtoReflect.Descriptor instead.
func (*UserReservationsRequest) Descriptor() ([]byte, []int) {
	return file_proto_reservation_reservation_proto_rawDescGZIP(), []int{22}
}

func (x *UserReservationsRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

type CreateReservationDateRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Date          []*ReservationDate     `protobuf:"bytes,1,rep,name=date,proto3" json:"date,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateReservationDateRequest) Reset() {
	*x = CreateReservationDateRequest{}
	mi := &file_proto_reservation_reservation_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateReservationDateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateReservationDateRequest) ProtoMessage() {}

func (x *CreateReservationDateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_reservation_reservation_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateReservationDateRequest.ProtoReflect.Descriptor instead.
func (*CreateReservationDateRequest) Descriptor() ([]byte, []int) {
	return file_proto_reservation_reservation_proto_rawDescGZIP(), []int{23}
}

func (x *CreateReservationDateRequest) GetDate() []*ReservationDate {
	if x != nil {
		return x.Date
	}
	return nil
}

type CreateReservationDateResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateReservationDateResponse) Reset() {
	*x = CreateReservationDateResponse{}
	mi := &file_proto_reservation_reservation_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateReservationDateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateReservationDateResponse) ProtoMessage() {}

func (x *CreateReservationDateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_reservation_reservation_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateReservationDateResponse.ProtoReflect.Descriptor instead.
func (*CreateReservationDateResponse) Descriptor() ([]byte, []int) {
	return file_proto_reservation_reservation_proto_rawDescGZIP(), []int{24}
}

type UpdateReservationDateResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateReservationDateResponse) Reset() {
	*x = UpdateReservationDateResponse{}
	mi := &file_proto_reservation_reservation_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateReservationDateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateReservationDateResponse) ProtoMessage() {}

func (x *UpdateReservationDateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_reservation_reservation_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateReservationDateResponse.ProtoReflect.Descriptor instead.
func (*UpdateReservationDateResponse) Descriptor() ([]byte, []int) {
	return file_proto_reservation_reservation_proto_rawDescGZIP(), []int{25}
}

type DeleteReservationDateResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteReservationDateResponse) Reset() {
	*x = DeleteReservationDateResponse{}
	mi := &file_proto_reservation_reservation_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteReservationDateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteReservationDateResponse) ProtoMessage() {}

func (x *DeleteReservationDateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_reservation_reservation_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteReservationDateResponse.ProtoReflect.Descriptor instead.
func (*DeleteReservationDateResponse) Descriptor() ([]byte, []int) {
	return file_proto_reservation_reservation_proto_rawDescGZIP(), []int{26}
}

type CreateReservationFeeResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateReservationFeeResponse) Reset() {
	*x = CreateReservationFeeResponse{}
	mi := &file_proto_reservation_reservation_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateReservationFeeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateReservationFeeResponse) ProtoMessage() {}

func (x *CreateReservationFeeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_reservation_reservation_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateReservationFeeResponse.ProtoReflect.Descriptor instead.
func (*CreateReservationFeeResponse) Descriptor() ([]byte, []int) {
	return file_proto_reservation_reservation_proto_rawDescGZIP(), []int{27}
}

type UpdateReservationFeeResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateReservationFeeResponse) Reset() {
	*x = UpdateReservationFeeResponse{}
	mi := &file_proto_reservation_reservation_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateReservationFeeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateReservationFeeResponse) ProtoMessage() {}

func (x *UpdateReservationFeeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_reservation_reservation_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateReservationFeeResponse.ProtoReflect.Descriptor instead.
func (*UpdateReservationFeeResponse) Descriptor() ([]byte, []int) {
	return file_proto_reservation_reservation_proto_rawDescGZIP(), []int{28}
}

type DeleteReservationFeeResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteReservationFeeResponse) Reset() {
	*x = DeleteReservationFeeResponse{}
	mi := &file_proto_reservation_reservation_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteReservationFeeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteReservationFeeResponse) ProtoMessage() {}

func (x *DeleteReservationFeeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_reservation_reservation_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteReservationFeeResponse.ProtoReflect.Descriptor instead.
func (*DeleteReservationFeeResponse) Descriptor() ([]byte, []int) {
	return file_proto_reservation_reservation_proto_rawDescGZIP(), []int{29}
}

type UpdateReservationDateRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Date          []*ReservationDate     `protobuf:"bytes,1,rep,name=date,proto3" json:"date,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateReservationDateRequest) Reset() {
	*x = UpdateReservationDateRequest{}
	mi := &file_proto_reservation_reservation_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateReservationDateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateReservationDateRequest) ProtoMessage() {}

func (x *UpdateReservationDateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_reservation_reservation_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateReservationDateRequest.ProtoReflect.Descriptor instead.
func (*UpdateReservationDateRequest) Descriptor() ([]byte, []int) {
	return file_proto_reservation_reservation_proto_rawDescGZIP(), []int{30}
}

func (x *UpdateReservationDateRequest) GetDate() []*ReservationDate {
	if x != nil {
		return x.Date
	}
	return nil
}

type DeleteReservationDateRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteReservationDateRequest) Reset() {
	*x = DeleteReservationDateRequest{}
	mi := &file_proto_reservation_reservation_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteReservationDateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteReservationDateRequest) ProtoMessage() {}

func (x *DeleteReservationDateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_reservation_reservation_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteReservationDateRequest.ProtoReflect.Descriptor instead.
func (*DeleteReservationDateRequest) Descriptor() ([]byte, []int) {
	return file_proto_reservation_reservation_proto_rawDescGZIP(), []int{31}
}

func (x *DeleteReservationDateRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type CreateReservationFeeRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Fee           []*ReservationFee      `protobuf:"bytes,1,rep,name=fee,proto3" json:"fee,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateReservationFeeRequest) Reset() {
	*x = CreateReservationFeeRequest{}
	mi := &file_proto_reservation_reservation_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateReservationFeeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateReservationFeeRequest) ProtoMessage() {}

func (x *CreateReservationFeeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_reservation_reservation_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateReservationFeeRequest.ProtoReflect.Descriptor instead.
func (*CreateReservationFeeRequest) Descriptor() ([]byte, []int) {
	return file_proto_reservation_reservation_proto_rawDescGZIP(), []int{32}
}

func (x *CreateReservationFeeRequest) GetFee() []*ReservationFee {
	if x != nil {
		return x.Fee
	}
	return nil
}

type UpdateReservationFeeRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Fee           []*ReservationFee      `protobuf:"bytes,1,rep,name=fee,proto3" json:"fee,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateReservationFeeRequest) Reset() {
	*x = UpdateReservationFeeRequest{}
	mi := &file_proto_reservation_reservation_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateReservationFeeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateReservationFeeRequest) ProtoMessage() {}

func (x *UpdateReservationFeeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_reservation_reservation_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateReservationFeeRequest.ProtoReflect.Descriptor instead.
func (*UpdateReservationFeeRequest) Descriptor() ([]byte, []int) {
	return file_proto_reservation_reservation_proto_rawDescGZIP(), []int{33}
}

func (x *UpdateReservationFeeRequest) GetFee() []*ReservationFee {
	if x != nil {
		return x.Fee
	}
	return nil
}

type DeleteReservationFeeRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteReservationFeeRequest) Reset() {
	*x = DeleteReservationFeeRequest{}
	mi := &file_proto_reservation_reservation_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteReservationFeeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteReservationFeeRequest) ProtoMessage() {}

func (x *DeleteReservationFeeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_reservation_reservation_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteReservationFeeRequest.ProtoReflect.Descriptor instead.
func (*DeleteReservationFeeRequest) Descriptor() ([]byte, []int) {
	return file_proto_reservation_reservation_proto_rawDescGZIP(), []int{34}
}

func (x *DeleteReservationFeeRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

var File_proto_reservation_reservation_proto protoreflect.FileDescriptor

var file_proto_reservation_reservation_proto_rawDesc = []byte{
	0x0a, 0x23, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2f, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0f, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x65, 0x73, 0x65, 0x72,
	0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x21, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x66, 0x61,
	0x63, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2f, 0x66, 0x61, 0x63, 0x69, 0x6c, 0x69, 0x74,
	0x69, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xe4, 0x08, 0x0a, 0x0b, 0x52, 0x65,
	0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x61, 0x63, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x66, 0x61, 0x63, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64, 0x12, 0x1d,
	0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a,
	0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x07,
	0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x88, 0x01, 0x01, 0x12, 0x12, 0x0a, 0x04, 0x66,
	0x65, 0x65, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x65, 0x65, 0x73, 0x12,
	0x1c, 0x0a, 0x09, 0x69, 0x6e, 0x73, 0x75, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x09, 0x69, 0x6e, 0x73, 0x75, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x2c, 0x0a,
	0x0f, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0e, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72,
	0x79, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x64,
	0x6f, 0x6f, 0x72, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08,
	0x48, 0x02, 0x52, 0x0a, 0x64, 0x6f, 0x6f, 0x72, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x88, 0x01,
	0x01, 0x12, 0x28, 0x0a, 0x0d, 0x64, 0x6f, 0x6f, 0x72, 0x73, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x0c, 0x64, 0x6f, 0x6f, 0x72,
	0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x70, 0x65, 0x6f, 0x70, 0x6c, 0x65, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x06, 0x70, 0x65, 0x6f, 0x70, 0x6c, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x26, 0x0a, 0x0c, 0x74, 0x65, 0x63, 0x68, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x0b, 0x74, 0x65, 0x63, 0x68, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x74, 0x65, 0x63,
	0x68, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x08, 0x48,
	0x07, 0x52, 0x0b, 0x74, 0x65, 0x63, 0x68, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x88, 0x01,
	0x01, 0x12, 0x19, 0x0a, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x08, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x0b,
	0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x12, 0x24, 0x0a,
	0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x68, 0x6f, 0x75, 0x72, 0x73, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x01, 0x48, 0x09, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x48, 0x6f, 0x75, 0x72, 0x73,
	0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x6e, 0x5f, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e,
	0x18, 0x15, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x6e, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e,
	0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x69, 0x64, 0x18, 0x16, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04,
	0x70, 0x61, 0x69, 0x64, 0x12, 0x24, 0x0a, 0x0b, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x75, 0x72, 0x6c, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0a, 0x52, 0x0a, 0x70, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x55, 0x72, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0f, 0x70, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x18, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x0b, 0x52, 0x0d, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69,
	0x6e, 0x6b, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x69, 0x63, 0x6b, 0x65,
	0x74, 0x5f, 0x6d, 0x61, 0x64, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x74, 0x69,
	0x63, 0x6b, 0x65, 0x74, 0x4d, 0x61, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x66,
	0x6c, 0x69, 0x63, 0x74, 0x73, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x63, 0x6f, 0x6e,
	0x66, 0x6c, 0x69, 0x63, 0x74, 0x73, 0x12, 0x2a, 0x0a, 0x0e, 0x69, 0x6e, 0x73, 0x75, 0x72, 0x61,
	0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0c,
	0x52, 0x0d, 0x69, 0x6e, 0x73, 0x75, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x88,
	0x01, 0x01, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x73, 0x74, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x72,
	0x69, 0x64, 0x65, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6f, 0x73, 0x74, 0x4f,
	0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x64, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f,
	0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x64, 0x6f, 0x6f, 0x72,
	0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x64, 0x6f, 0x6f, 0x72,
	0x73, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x70, 0x65, 0x6f, 0x70, 0x6c, 0x65, 0x42, 0x0f, 0x0a,
	0x0d, 0x5f, 0x74, 0x65, 0x63, 0x68, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x42, 0x0f,
	0x0a, 0x0d, 0x5f, 0x74, 0x65, 0x63, 0x68, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x42,
	0x08, 0x0a, 0x06, 0x5f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x5f, 0x68, 0x6f, 0x75, 0x72, 0x73, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x70, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x75, 0x72, 0x6c, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x70, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x69, 0x64, 0x42, 0x11, 0x0a,
	0x0f, 0x5f, 0x69, 0x6e, 0x73, 0x75, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x6e, 0x6b,
	0x22, 0x91, 0x02, 0x0a, 0x0f, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x44, 0x61, 0x74, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x64, 0x61,
	0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x44,
	0x61, 0x74, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1d,
	0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a,
	0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65, 0x73, 0x65,
	0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0d, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12,
	0x1a, 0x0a, 0x08, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64, 0x12, 0x26, 0x0a, 0x0c, 0x67,
	0x63, 0x61, 0x6c, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x0b, 0x67, 0x63, 0x61, 0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x69, 0x64,
	0x88, 0x01, 0x01, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x67, 0x63, 0x61, 0x6c, 0x5f, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x69, 0x64, 0x22, 0xa0, 0x01, 0x0a, 0x0e, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x46, 0x65, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x61, 0x64, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x66, 0x65, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x46, 0x65, 0x65, 0x73,
	0x12, 0x20, 0x0a, 0x09, 0x66, 0x65, 0x65, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x08, 0x66, 0x65, 0x65, 0x73, 0x54, 0x79, 0x70, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x72, 0x65, 0x73, 0x65,
	0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x66, 0x65,
	0x65, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x22, 0xf4, 0x01, 0x0a, 0x0f, 0x46, 0x75, 0x6c, 0x6c,
	0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3e, 0x0a, 0x0b, 0x72,
	0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b,
	0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x05, 0x64,
	0x61, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x73,
	0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x52, 0x05, 0x64, 0x61,
	0x74, 0x65, 0x73, 0x12, 0x33, 0x0a, 0x04, 0x66, 0x65, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46,
	0x65, 0x65, 0x52, 0x04, 0x66, 0x65, 0x65, 0x73, 0x12, 0x34, 0x0a, 0x08, 0x66, 0x61, 0x63, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x66, 0x61, 0x63, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x46, 0x61, 0x63, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x52, 0x08, 0x66, 0x61, 0x63, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x22, 0x5f,
	0x0a, 0x17, 0x41, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x44, 0x0a, 0x0c, 0x72, 0x65, 0x73,
	0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x46, 0x75, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22,
	0x5f, 0x0a, 0x17, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x68, 0x69, 0x73, 0x57, 0x65,
	0x65, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x44, 0x0a, 0x0c, 0x72, 0x65,
	0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x46, 0x75, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x22, 0x64, 0x0a, 0x1c, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64, 0x52, 0x65, 0x73, 0x65,
	0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x44, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x65, 0x73,
	0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x46, 0x75, 0x6c, 0x6c, 0x52, 0x65, 0x73,
	0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x63, 0x0a, 0x1b, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e,
	0x67, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x44, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x46, 0x75,
	0x6c, 0x6c, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x72,
	0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x60, 0x0a, 0x18, 0x55,
	0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x44, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x65, 0x72,
	0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x46, 0x75, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x0c, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x1b, 0x0a,
	0x19, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x27, 0x0a, 0x15, 0x47, 0x65,
	0x74, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x02, 0x69, 0x64, 0x22, 0x15, 0x0a, 0x13, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x2c, 0x0a, 0x14, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x1c, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x54, 0x68, 0x69, 0x73, 0x57, 0x65, 0x65, 0x6b, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x23, 0x0a, 0x21, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c,
	0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x22, 0x0a, 0x20, 0x47,
	0x65, 0x74, 0x41, 0x6c, 0x6c, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x65,
	0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22,
	0x5e, 0x0a, 0x18, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x42, 0x0a, 0x0b, 0x72,
	0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x46, 0x75, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x0b, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22,
	0x2b, 0x0a, 0x19, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x22, 0x5e, 0x0a, 0x18,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x42, 0x0a, 0x0b, 0x72, 0x65, 0x73, 0x65,
	0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x46, 0x75, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x0b, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x1b, 0x0a, 0x19,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2a, 0x0a, 0x18, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x02, 0x69, 0x64, 0x22, 0x1b, 0x0a, 0x19, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52,
	0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x32, 0x0a, 0x17, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a,
	0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x54, 0x0a, 0x1c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x34, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x65, 0x73, 0x65, 0x72,
	0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x22, 0x1f, 0x0a, 0x1d,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x44, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1f, 0x0a,
	0x1d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1f,
	0x0a, 0x1d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x1e, 0x0a, 0x1c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x46, 0x65, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x1e, 0x0a, 0x1c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x46, 0x65, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x1e, 0x0a, 0x1c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x46, 0x65, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x54, 0x0a, 0x1c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x34, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x65, 0x22, 0x2e, 0x0a, 0x1c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52,
	0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x02, 0x69, 0x64, 0x22, 0x50, 0x0a, 0x1b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x65, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x03, 0x66, 0x65, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46,
	0x65, 0x65, 0x52, 0x03, 0x66, 0x65, 0x65, 0x22, 0x50, 0x0a, 0x1b, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x65, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x03, 0x66, 0x65, 0x65, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x46, 0x65, 0x65, 0x52, 0x03, 0x66, 0x65, 0x65, 0x22, 0x2d, 0x0a, 0x1b, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x65,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x32, 0xbf, 0x0e, 0x0a, 0x12, 0x52, 0x65, 0x73,
	0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12,
	0x6f, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x65, 0x73, 0x65,
	0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x52, 0x65,
	0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x28, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x03, 0x90, 0x02, 0x01,
	0x12, 0x5f, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x26, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x46, 0x75, 0x6c,
	0x6c, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x03, 0x90, 0x02,
	0x01, 0x12, 0x60, 0x0a, 0x0c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x24, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x65,
	0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x03,
	0x90, 0x02, 0x01, 0x12, 0x71, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x73, 0x54, 0x68, 0x69, 0x73, 0x57, 0x65, 0x65, 0x6b, 0x12, 0x2b, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x47, 0x65, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x54, 0x68, 0x69, 0x73, 0x57, 0x65, 0x65, 0x6b,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x65,
	0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x54, 0x68, 0x69, 0x73, 0x57, 0x65, 0x65, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x03, 0x90, 0x02, 0x01, 0x12, 0x84, 0x01, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x41, 0x6c,
	0x6c, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x32, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x65, 0x73, 0x65,
	0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x41, 0x70,
	0x70, 0x72, 0x6f, 0x76, 0x65, 0x64, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x70, 0x70, 0x72,
	0x6f, 0x76, 0x65, 0x64, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x03, 0x90, 0x02, 0x01, 0x12, 0x81, 0x01,
	0x0a, 0x19, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x52,
	0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x31, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x47, 0x65,
	0x74, 0x41, 0x6c, 0x6c, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x65, 0x72,
	0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x03, 0x90, 0x02,
	0x01, 0x12, 0x6a, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x65, 0x72,
	0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x65, 0x73,
	0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x2a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6a, 0x0a,
	0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x29, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x65, 0x72,
	0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6a, 0x0a, 0x11, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x29,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6c, 0x0a, 0x10, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73,
	0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x28, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x03,
	0x90, 0x02, 0x01, 0x12, 0x76, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73,
	0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x2d, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x44, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x76, 0x0a, 0x15, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x44, 0x61, 0x74, 0x65, 0x12, 0x2d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x65, 0x73, 0x65, 0x72,
	0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73,
	0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x65,
	0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x76, 0x0a, 0x15, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73,
	0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x2d, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x44, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x73, 0x0a, 0x14, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x46, 0x65, 0x65, 0x12, 0x2c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x65,
	0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x65, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x2d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x65, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x73, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x65, 0x65, 0x12, 0x2c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72,
	0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x65, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x65, 0x73,
	0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x65, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x73, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52,
	0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x65, 0x65, 0x12, 0x2c, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x46, 0x65, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46,
	0x65, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x33, 0x5a, 0x31, 0x61, 0x70,
	0x69, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2f, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3b, 0x72, 0x65, 0x73,
	0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_reservation_reservation_proto_rawDescOnce sync.Once
	file_proto_reservation_reservation_proto_rawDescData = file_proto_reservation_reservation_proto_rawDesc
)

func file_proto_reservation_reservation_proto_rawDescGZIP() []byte {
	file_proto_reservation_reservation_proto_rawDescOnce.Do(func() {
		file_proto_reservation_reservation_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_reservation_reservation_proto_rawDescData)
	})
	return file_proto_reservation_reservation_proto_rawDescData
}

var file_proto_reservation_reservation_proto_msgTypes = make([]protoimpl.MessageInfo, 35)
var file_proto_reservation_reservation_proto_goTypes = []any{
	(*Reservation)(nil),                       // 0: api.reservation.Reservation
	(*ReservationDate)(nil),                   // 1: api.reservation.ReservationDate
	(*ReservationFee)(nil),                    // 2: api.reservation.ReservationFee
	(*FullReservation)(nil),                   // 3: api.reservation.FullReservation
	(*AllReservationsResponse)(nil),           // 4: api.reservation.AllReservationsResponse
	(*RequestThisWeekResponse)(nil),           // 5: api.reservation.RequestThisWeekResponse
	(*ApprovedReservationsResponse)(nil),      // 6: api.reservation.ApprovedReservationsResponse
	(*PendingReservationsResponse)(nil),       // 7: api.reservation.PendingReservationsResponse
	(*UserReservationsResponse)(nil),          // 8: api.reservation.UserReservationsResponse
	(*GetAllReservationsRequest)(nil),         // 9: api.reservation.GetAllReservationsRequest
	(*GetReservationRequest)(nil),             // 10: api.reservation.GetReservationRequest
	(*RequestCountRequest)(nil),               // 11: api.reservation.RequestCountRequest
	(*RequestCountResponse)(nil),              // 12: api.reservation.RequestCountResponse
	(*GetRequestsThisWeekRequest)(nil),        // 13: api.reservation.GetRequestsThisWeekRequest
	(*GetAllApprovedReservationsRequest)(nil), // 14: api.reservation.GetAllApprovedReservationsRequest
	(*GetAllPendingReservationsRequest)(nil),  // 15: api.reservation.GetAllPendingReservationsRequest
	(*CreateReservationRequest)(nil),          // 16: api.reservation.CreateReservationRequest
	(*CreateReservationResponse)(nil),         // 17: api.reservation.CreateReservationResponse
	(*UpdateReservationRequest)(nil),          // 18: api.reservation.UpdateReservationRequest
	(*UpdateReservationResponse)(nil),         // 19: api.reservation.UpdateReservationResponse
	(*DeleteReservationRequest)(nil),          // 20: api.reservation.DeleteReservationRequest
	(*DeleteReservationResponse)(nil),         // 21: api.reservation.DeleteReservationResponse
	(*UserReservationsRequest)(nil),           // 22: api.reservation.UserReservationsRequest
	(*CreateReservationDateRequest)(nil),      // 23: api.reservation.CreateReservationDateRequest
	(*CreateReservationDateResponse)(nil),     // 24: api.reservation.CreateReservationDateResponse
	(*UpdateReservationDateResponse)(nil),     // 25: api.reservation.UpdateReservationDateResponse
	(*DeleteReservationDateResponse)(nil),     // 26: api.reservation.DeleteReservationDateResponse
	(*CreateReservationFeeResponse)(nil),      // 27: api.reservation.CreateReservationFeeResponse
	(*UpdateReservationFeeResponse)(nil),      // 28: api.reservation.UpdateReservationFeeResponse
	(*DeleteReservationFeeResponse)(nil),      // 29: api.reservation.DeleteReservationFeeResponse
	(*UpdateReservationDateRequest)(nil),      // 30: api.reservation.UpdateReservationDateRequest
	(*DeleteReservationDateRequest)(nil),      // 31: api.reservation.DeleteReservationDateRequest
	(*CreateReservationFeeRequest)(nil),       // 32: api.reservation.CreateReservationFeeRequest
	(*UpdateReservationFeeRequest)(nil),       // 33: api.reservation.UpdateReservationFeeRequest
	(*DeleteReservationFeeRequest)(nil),       // 34: api.reservation.DeleteReservationFeeRequest
	(*facilities.Facility)(nil),               // 35: api.facilities.Facility
}
var file_proto_reservation_reservation_proto_depIdxs = []int32{
	0,  // 0: api.reservation.FullReservation.reservation:type_name -> api.reservation.Reservation
	1,  // 1: api.reservation.FullReservation.dates:type_name -> api.reservation.ReservationDate
	2,  // 2: api.reservation.FullReservation.fees:type_name -> api.reservation.ReservationFee
	35, // 3: api.reservation.FullReservation.facility:type_name -> api.facilities.Facility
	3,  // 4: api.reservation.AllReservationsResponse.reservations:type_name -> api.reservation.FullReservation
	3,  // 5: api.reservation.RequestThisWeekResponse.reservations:type_name -> api.reservation.FullReservation
	3,  // 6: api.reservation.ApprovedReservationsResponse.reservations:type_name -> api.reservation.FullReservation
	3,  // 7: api.reservation.PendingReservationsResponse.reservations:type_name -> api.reservation.FullReservation
	3,  // 8: api.reservation.UserReservationsResponse.reservations:type_name -> api.reservation.FullReservation
	3,  // 9: api.reservation.CreateReservationRequest.reservation:type_name -> api.reservation.FullReservation
	3,  // 10: api.reservation.UpdateReservationRequest.reservation:type_name -> api.reservation.FullReservation
	1,  // 11: api.reservation.CreateReservationDateRequest.date:type_name -> api.reservation.ReservationDate
	1,  // 12: api.reservation.UpdateReservationDateRequest.date:type_name -> api.reservation.ReservationDate
	2,  // 13: api.reservation.CreateReservationFeeRequest.fee:type_name -> api.reservation.ReservationFee
	2,  // 14: api.reservation.UpdateReservationFeeRequest.fee:type_name -> api.reservation.ReservationFee
	9,  // 15: api.reservation.ReservationService.GetAllReservations:input_type -> api.reservation.GetAllReservationsRequest
	10, // 16: api.reservation.ReservationService.GetReservation:input_type -> api.reservation.GetReservationRequest
	11, // 17: api.reservation.ReservationService.RequestCount:input_type -> api.reservation.RequestCountRequest
	13, // 18: api.reservation.ReservationService.GetRequestsThisWeek:input_type -> api.reservation.GetRequestsThisWeekRequest
	14, // 19: api.reservation.ReservationService.GetAllApprovedReservations:input_type -> api.reservation.GetAllApprovedReservationsRequest
	15, // 20: api.reservation.ReservationService.GetAllPendingReservations:input_type -> api.reservation.GetAllPendingReservationsRequest
	16, // 21: api.reservation.ReservationService.CreateReservation:input_type -> api.reservation.CreateReservationRequest
	18, // 22: api.reservation.ReservationService.UpdateReservation:input_type -> api.reservation.UpdateReservationRequest
	20, // 23: api.reservation.ReservationService.DeleteReservation:input_type -> api.reservation.DeleteReservationRequest
	22, // 24: api.reservation.ReservationService.UserReservations:input_type -> api.reservation.UserReservationsRequest
	23, // 25: api.reservation.ReservationService.CreateReservationDate:input_type -> api.reservation.CreateReservationDateRequest
	30, // 26: api.reservation.ReservationService.UpdateReservationDate:input_type -> api.reservation.UpdateReservationDateRequest
	31, // 27: api.reservation.ReservationService.DeleteReservationDate:input_type -> api.reservation.DeleteReservationDateRequest
	32, // 28: api.reservation.ReservationService.CreateReservationFee:input_type -> api.reservation.CreateReservationFeeRequest
	33, // 29: api.reservation.ReservationService.UpdateReservationFee:input_type -> api.reservation.UpdateReservationFeeRequest
	34, // 30: api.reservation.ReservationService.DeleteReservationFee:input_type -> api.reservation.DeleteReservationFeeRequest
	4,  // 31: api.reservation.ReservationService.GetAllReservations:output_type -> api.reservation.AllReservationsResponse
	3,  // 32: api.reservation.ReservationService.GetReservation:output_type -> api.reservation.FullReservation
	12, // 33: api.reservation.ReservationService.RequestCount:output_type -> api.reservation.RequestCountResponse
	5,  // 34: api.reservation.ReservationService.GetRequestsThisWeek:output_type -> api.reservation.RequestThisWeekResponse
	6,  // 35: api.reservation.ReservationService.GetAllApprovedReservations:output_type -> api.reservation.ApprovedReservationsResponse
	7,  // 36: api.reservation.ReservationService.GetAllPendingReservations:output_type -> api.reservation.PendingReservationsResponse
	17, // 37: api.reservation.ReservationService.CreateReservation:output_type -> api.reservation.CreateReservationResponse
	19, // 38: api.reservation.ReservationService.UpdateReservation:output_type -> api.reservation.UpdateReservationResponse
	21, // 39: api.reservation.ReservationService.DeleteReservation:output_type -> api.reservation.DeleteReservationResponse
	8,  // 40: api.reservation.ReservationService.UserReservations:output_type -> api.reservation.UserReservationsResponse
	24, // 41: api.reservation.ReservationService.CreateReservationDate:output_type -> api.reservation.CreateReservationDateResponse
	25, // 42: api.reservation.ReservationService.UpdateReservationDate:output_type -> api.reservation.UpdateReservationDateResponse
	26, // 43: api.reservation.ReservationService.DeleteReservationDate:output_type -> api.reservation.DeleteReservationDateResponse
	27, // 44: api.reservation.ReservationService.CreateReservationFee:output_type -> api.reservation.CreateReservationFeeResponse
	28, // 45: api.reservation.ReservationService.UpdateReservationFee:output_type -> api.reservation.UpdateReservationFeeResponse
	29, // 46: api.reservation.ReservationService.DeleteReservationFee:output_type -> api.reservation.DeleteReservationFeeResponse
	31, // [31:47] is the sub-list for method output_type
	15, // [15:31] is the sub-list for method input_type
	15, // [15:15] is the sub-list for extension type_name
	15, // [15:15] is the sub-list for extension extendee
	0,  // [0:15] is the sub-list for field type_name
}

func init() { file_proto_reservation_reservation_proto_init() }
func file_proto_reservation_reservation_proto_init() {
	if File_proto_reservation_reservation_proto != nil {
		return
	}
	file_proto_reservation_reservation_proto_msgTypes[0].OneofWrappers = []any{}
	file_proto_reservation_reservation_proto_msgTypes[1].OneofWrappers = []any{}
	file_proto_reservation_reservation_proto_msgTypes[2].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_reservation_reservation_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   35,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_reservation_reservation_proto_goTypes,
		DependencyIndexes: file_proto_reservation_reservation_proto_depIdxs,
		MessageInfos:      file_proto_reservation_reservation_proto_msgTypes,
	}.Build()
	File_proto_reservation_reservation_proto = out.File
	file_proto_reservation_reservation_proto_rawDesc = nil
	file_proto_reservation_reservation_proto_goTypes = nil
	file_proto_reservation_reservation_proto_depIdxs = nil
}
