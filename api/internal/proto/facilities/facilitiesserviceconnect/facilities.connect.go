// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: proto/facilities/facilities.proto

package facilitiesserviceconnect

import (
	facilities "api/internal/proto/facilities"
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// FacilitiesServiceName is the fully-qualified name of the FacilitiesService service.
	FacilitiesServiceName = "api.facilities.FacilitiesService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// FacilitiesServiceGetAllFacilitiesProcedure is the fully-qualified name of the FacilitiesService's
	// GetAllFacilities RPC.
	FacilitiesServiceGetAllFacilitiesProcedure = "/api.facilities.FacilitiesService/GetAllFacilities"
	// FacilitiesServiceGetFacilityProcedure is the fully-qualified name of the FacilitiesService's
	// GetFacility RPC.
	FacilitiesServiceGetFacilityProcedure = "/api.facilities.FacilitiesService/GetFacility"
	// FacilitiesServiceGetFacilityCategoriesProcedure is the fully-qualified name of the
	// FacilitiesService's GetFacilityCategories RPC.
	FacilitiesServiceGetFacilityCategoriesProcedure = "/api.facilities.FacilitiesService/GetFacilityCategories"
	// FacilitiesServiceGetBuildingFacilitiesProcedure is the fully-qualified name of the
	// FacilitiesService's GetBuildingFacilities RPC.
	FacilitiesServiceGetBuildingFacilitiesProcedure = "/api.facilities.FacilitiesService/GetBuildingFacilities"
	// FacilitiesServiceCreateFacilityProcedure is the fully-qualified name of the FacilitiesService's
	// CreateFacility RPC.
	FacilitiesServiceCreateFacilityProcedure = "/api.facilities.FacilitiesService/CreateFacility"
	// FacilitiesServiceUpdateFacilityProcedure is the fully-qualified name of the FacilitiesService's
	// UpdateFacility RPC.
	FacilitiesServiceUpdateFacilityProcedure = "/api.facilities.FacilitiesService/UpdateFacility"
	// FacilitiesServiceDeleteFacilityProcedure is the fully-qualified name of the FacilitiesService's
	// DeleteFacility RPC.
	FacilitiesServiceDeleteFacilityProcedure = "/api.facilities.FacilitiesService/DeleteFacility"
	// FacilitiesServiceCreateFacilityCategoryProcedure is the fully-qualified name of the
	// FacilitiesService's CreateFacilityCategory RPC.
	FacilitiesServiceCreateFacilityCategoryProcedure = "/api.facilities.FacilitiesService/CreateFacilityCategory"
	// FacilitiesServiceUpdateFacilityCategoryProcedure is the fully-qualified name of the
	// FacilitiesService's UpdateFacilityCategory RPC.
	FacilitiesServiceUpdateFacilityCategoryProcedure = "/api.facilities.FacilitiesService/UpdateFacilityCategory"
	// FacilitiesServiceDeleteFacilityCategoryProcedure is the fully-qualified name of the
	// FacilitiesService's DeleteFacilityCategory RPC.
	FacilitiesServiceDeleteFacilityCategoryProcedure = "/api.facilities.FacilitiesService/DeleteFacilityCategory"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	facilitiesServiceServiceDescriptor                      = facilities.File_proto_facilities_facilities_proto.Services().ByName("FacilitiesService")
	facilitiesServiceGetAllFacilitiesMethodDescriptor       = facilitiesServiceServiceDescriptor.Methods().ByName("GetAllFacilities")
	facilitiesServiceGetFacilityMethodDescriptor            = facilitiesServiceServiceDescriptor.Methods().ByName("GetFacility")
	facilitiesServiceGetFacilityCategoriesMethodDescriptor  = facilitiesServiceServiceDescriptor.Methods().ByName("GetFacilityCategories")
	facilitiesServiceGetBuildingFacilitiesMethodDescriptor  = facilitiesServiceServiceDescriptor.Methods().ByName("GetBuildingFacilities")
	facilitiesServiceCreateFacilityMethodDescriptor         = facilitiesServiceServiceDescriptor.Methods().ByName("CreateFacility")
	facilitiesServiceUpdateFacilityMethodDescriptor         = facilitiesServiceServiceDescriptor.Methods().ByName("UpdateFacility")
	facilitiesServiceDeleteFacilityMethodDescriptor         = facilitiesServiceServiceDescriptor.Methods().ByName("DeleteFacility")
	facilitiesServiceCreateFacilityCategoryMethodDescriptor = facilitiesServiceServiceDescriptor.Methods().ByName("CreateFacilityCategory")
	facilitiesServiceUpdateFacilityCategoryMethodDescriptor = facilitiesServiceServiceDescriptor.Methods().ByName("UpdateFacilityCategory")
	facilitiesServiceDeleteFacilityCategoryMethodDescriptor = facilitiesServiceServiceDescriptor.Methods().ByName("DeleteFacilityCategory")
)

// FacilitiesServiceClient is a client for the api.facilities.FacilitiesService service.
type FacilitiesServiceClient interface {
	GetAllFacilities(context.Context, *connect.Request[facilities.GetAllFacilitiesRequest]) (*connect.Response[facilities.GetAllFacilitiesResponse], error)
	GetFacility(context.Context, *connect.Request[facilities.GetFacilityRequest]) (*connect.Response[facilities.FacilityWithCategories], error)
	GetFacilityCategories(context.Context, *connect.Request[facilities.GetFacilityCategoriesRequest]) (*connect.Response[facilities.GetFacilityCategoriesResponse], error)
	GetBuildingFacilities(context.Context, *connect.Request[facilities.GetBuildingFacilitiesRequest]) (*connect.Response[facilities.GetBuildingFacilitiesResponse], error)
	CreateFacility(context.Context, *connect.Request[facilities.CreateFacilityRequest]) (*connect.Response[facilities.FacilityWithCategories], error)
	UpdateFacility(context.Context, *connect.Request[facilities.UpdateFacilityRequest]) (*connect.Response[facilities.FacilityWithCategories], error)
	DeleteFacility(context.Context, *connect.Request[facilities.DeleteFacilityRequest]) (*connect.Response[facilities.DeleteFacilityResponse], error)
	CreateFacilityCategory(context.Context, *connect.Request[facilities.CreateFacilityCategoryRequest]) (*connect.Response[facilities.Category], error)
	UpdateFacilityCategory(context.Context, *connect.Request[facilities.UpdateFacilityCategoryRequest]) (*connect.Response[facilities.Category], error)
	DeleteFacilityCategory(context.Context, *connect.Request[facilities.DeleteFacilityCategoryRequest]) (*connect.Response[facilities.DeleteFacilityCategoryResponse], error)
}

// NewFacilitiesServiceClient constructs a client for the api.facilities.FacilitiesService service.
// By default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped
// responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewFacilitiesServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) FacilitiesServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &facilitiesServiceClient{
		getAllFacilities: connect.NewClient[facilities.GetAllFacilitiesRequest, facilities.GetAllFacilitiesResponse](
			httpClient,
			baseURL+FacilitiesServiceGetAllFacilitiesProcedure,
			connect.WithSchema(facilitiesServiceGetAllFacilitiesMethodDescriptor),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		getFacility: connect.NewClient[facilities.GetFacilityRequest, facilities.FacilityWithCategories](
			httpClient,
			baseURL+FacilitiesServiceGetFacilityProcedure,
			connect.WithSchema(facilitiesServiceGetFacilityMethodDescriptor),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		getFacilityCategories: connect.NewClient[facilities.GetFacilityCategoriesRequest, facilities.GetFacilityCategoriesResponse](
			httpClient,
			baseURL+FacilitiesServiceGetFacilityCategoriesProcedure,
			connect.WithSchema(facilitiesServiceGetFacilityCategoriesMethodDescriptor),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		getBuildingFacilities: connect.NewClient[facilities.GetBuildingFacilitiesRequest, facilities.GetBuildingFacilitiesResponse](
			httpClient,
			baseURL+FacilitiesServiceGetBuildingFacilitiesProcedure,
			connect.WithSchema(facilitiesServiceGetBuildingFacilitiesMethodDescriptor),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		createFacility: connect.NewClient[facilities.CreateFacilityRequest, facilities.FacilityWithCategories](
			httpClient,
			baseURL+FacilitiesServiceCreateFacilityProcedure,
			connect.WithSchema(facilitiesServiceCreateFacilityMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		updateFacility: connect.NewClient[facilities.UpdateFacilityRequest, facilities.FacilityWithCategories](
			httpClient,
			baseURL+FacilitiesServiceUpdateFacilityProcedure,
			connect.WithSchema(facilitiesServiceUpdateFacilityMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		deleteFacility: connect.NewClient[facilities.DeleteFacilityRequest, facilities.DeleteFacilityResponse](
			httpClient,
			baseURL+FacilitiesServiceDeleteFacilityProcedure,
			connect.WithSchema(facilitiesServiceDeleteFacilityMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		createFacilityCategory: connect.NewClient[facilities.CreateFacilityCategoryRequest, facilities.Category](
			httpClient,
			baseURL+FacilitiesServiceCreateFacilityCategoryProcedure,
			connect.WithSchema(facilitiesServiceCreateFacilityCategoryMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		updateFacilityCategory: connect.NewClient[facilities.UpdateFacilityCategoryRequest, facilities.Category](
			httpClient,
			baseURL+FacilitiesServiceUpdateFacilityCategoryProcedure,
			connect.WithSchema(facilitiesServiceUpdateFacilityCategoryMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		deleteFacilityCategory: connect.NewClient[facilities.DeleteFacilityCategoryRequest, facilities.DeleteFacilityCategoryResponse](
			httpClient,
			baseURL+FacilitiesServiceDeleteFacilityCategoryProcedure,
			connect.WithSchema(facilitiesServiceDeleteFacilityCategoryMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// facilitiesServiceClient implements FacilitiesServiceClient.
type facilitiesServiceClient struct {
	getAllFacilities       *connect.Client[facilities.GetAllFacilitiesRequest, facilities.GetAllFacilitiesResponse]
	getFacility            *connect.Client[facilities.GetFacilityRequest, facilities.FacilityWithCategories]
	getFacilityCategories  *connect.Client[facilities.GetFacilityCategoriesRequest, facilities.GetFacilityCategoriesResponse]
	getBuildingFacilities  *connect.Client[facilities.GetBuildingFacilitiesRequest, facilities.GetBuildingFacilitiesResponse]
	createFacility         *connect.Client[facilities.CreateFacilityRequest, facilities.FacilityWithCategories]
	updateFacility         *connect.Client[facilities.UpdateFacilityRequest, facilities.FacilityWithCategories]
	deleteFacility         *connect.Client[facilities.DeleteFacilityRequest, facilities.DeleteFacilityResponse]
	createFacilityCategory *connect.Client[facilities.CreateFacilityCategoryRequest, facilities.Category]
	updateFacilityCategory *connect.Client[facilities.UpdateFacilityCategoryRequest, facilities.Category]
	deleteFacilityCategory *connect.Client[facilities.DeleteFacilityCategoryRequest, facilities.DeleteFacilityCategoryResponse]
}

// GetAllFacilities calls api.facilities.FacilitiesService.GetAllFacilities.
func (c *facilitiesServiceClient) GetAllFacilities(ctx context.Context, req *connect.Request[facilities.GetAllFacilitiesRequest]) (*connect.Response[facilities.GetAllFacilitiesResponse], error) {
	return c.getAllFacilities.CallUnary(ctx, req)
}

// GetFacility calls api.facilities.FacilitiesService.GetFacility.
func (c *facilitiesServiceClient) GetFacility(ctx context.Context, req *connect.Request[facilities.GetFacilityRequest]) (*connect.Response[facilities.FacilityWithCategories], error) {
	return c.getFacility.CallUnary(ctx, req)
}

// GetFacilityCategories calls api.facilities.FacilitiesService.GetFacilityCategories.
func (c *facilitiesServiceClient) GetFacilityCategories(ctx context.Context, req *connect.Request[facilities.GetFacilityCategoriesRequest]) (*connect.Response[facilities.GetFacilityCategoriesResponse], error) {
	return c.getFacilityCategories.CallUnary(ctx, req)
}

// GetBuildingFacilities calls api.facilities.FacilitiesService.GetBuildingFacilities.
func (c *facilitiesServiceClient) GetBuildingFacilities(ctx context.Context, req *connect.Request[facilities.GetBuildingFacilitiesRequest]) (*connect.Response[facilities.GetBuildingFacilitiesResponse], error) {
	return c.getBuildingFacilities.CallUnary(ctx, req)
}

// CreateFacility calls api.facilities.FacilitiesService.CreateFacility.
func (c *facilitiesServiceClient) CreateFacility(ctx context.Context, req *connect.Request[facilities.CreateFacilityRequest]) (*connect.Response[facilities.FacilityWithCategories], error) {
	return c.createFacility.CallUnary(ctx, req)
}

// UpdateFacility calls api.facilities.FacilitiesService.UpdateFacility.
func (c *facilitiesServiceClient) UpdateFacility(ctx context.Context, req *connect.Request[facilities.UpdateFacilityRequest]) (*connect.Response[facilities.FacilityWithCategories], error) {
	return c.updateFacility.CallUnary(ctx, req)
}

// DeleteFacility calls api.facilities.FacilitiesService.DeleteFacility.
func (c *facilitiesServiceClient) DeleteFacility(ctx context.Context, req *connect.Request[facilities.DeleteFacilityRequest]) (*connect.Response[facilities.DeleteFacilityResponse], error) {
	return c.deleteFacility.CallUnary(ctx, req)
}

// CreateFacilityCategory calls api.facilities.FacilitiesService.CreateFacilityCategory.
func (c *facilitiesServiceClient) CreateFacilityCategory(ctx context.Context, req *connect.Request[facilities.CreateFacilityCategoryRequest]) (*connect.Response[facilities.Category], error) {
	return c.createFacilityCategory.CallUnary(ctx, req)
}

// UpdateFacilityCategory calls api.facilities.FacilitiesService.UpdateFacilityCategory.
func (c *facilitiesServiceClient) UpdateFacilityCategory(ctx context.Context, req *connect.Request[facilities.UpdateFacilityCategoryRequest]) (*connect.Response[facilities.Category], error) {
	return c.updateFacilityCategory.CallUnary(ctx, req)
}

// DeleteFacilityCategory calls api.facilities.FacilitiesService.DeleteFacilityCategory.
func (c *facilitiesServiceClient) DeleteFacilityCategory(ctx context.Context, req *connect.Request[facilities.DeleteFacilityCategoryRequest]) (*connect.Response[facilities.DeleteFacilityCategoryResponse], error) {
	return c.deleteFacilityCategory.CallUnary(ctx, req)
}

// FacilitiesServiceHandler is an implementation of the api.facilities.FacilitiesService service.
type FacilitiesServiceHandler interface {
	GetAllFacilities(context.Context, *connect.Request[facilities.GetAllFacilitiesRequest]) (*connect.Response[facilities.GetAllFacilitiesResponse], error)
	GetFacility(context.Context, *connect.Request[facilities.GetFacilityRequest]) (*connect.Response[facilities.FacilityWithCategories], error)
	GetFacilityCategories(context.Context, *connect.Request[facilities.GetFacilityCategoriesRequest]) (*connect.Response[facilities.GetFacilityCategoriesResponse], error)
	GetBuildingFacilities(context.Context, *connect.Request[facilities.GetBuildingFacilitiesRequest]) (*connect.Response[facilities.GetBuildingFacilitiesResponse], error)
	CreateFacility(context.Context, *connect.Request[facilities.CreateFacilityRequest]) (*connect.Response[facilities.FacilityWithCategories], error)
	UpdateFacility(context.Context, *connect.Request[facilities.UpdateFacilityRequest]) (*connect.Response[facilities.FacilityWithCategories], error)
	DeleteFacility(context.Context, *connect.Request[facilities.DeleteFacilityRequest]) (*connect.Response[facilities.DeleteFacilityResponse], error)
	CreateFacilityCategory(context.Context, *connect.Request[facilities.CreateFacilityCategoryRequest]) (*connect.Response[facilities.Category], error)
	UpdateFacilityCategory(context.Context, *connect.Request[facilities.UpdateFacilityCategoryRequest]) (*connect.Response[facilities.Category], error)
	DeleteFacilityCategory(context.Context, *connect.Request[facilities.DeleteFacilityCategoryRequest]) (*connect.Response[facilities.DeleteFacilityCategoryResponse], error)
}

// NewFacilitiesServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewFacilitiesServiceHandler(svc FacilitiesServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	facilitiesServiceGetAllFacilitiesHandler := connect.NewUnaryHandler(
		FacilitiesServiceGetAllFacilitiesProcedure,
		svc.GetAllFacilities,
		connect.WithSchema(facilitiesServiceGetAllFacilitiesMethodDescriptor),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	facilitiesServiceGetFacilityHandler := connect.NewUnaryHandler(
		FacilitiesServiceGetFacilityProcedure,
		svc.GetFacility,
		connect.WithSchema(facilitiesServiceGetFacilityMethodDescriptor),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	facilitiesServiceGetFacilityCategoriesHandler := connect.NewUnaryHandler(
		FacilitiesServiceGetFacilityCategoriesProcedure,
		svc.GetFacilityCategories,
		connect.WithSchema(facilitiesServiceGetFacilityCategoriesMethodDescriptor),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	facilitiesServiceGetBuildingFacilitiesHandler := connect.NewUnaryHandler(
		FacilitiesServiceGetBuildingFacilitiesProcedure,
		svc.GetBuildingFacilities,
		connect.WithSchema(facilitiesServiceGetBuildingFacilitiesMethodDescriptor),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	facilitiesServiceCreateFacilityHandler := connect.NewUnaryHandler(
		FacilitiesServiceCreateFacilityProcedure,
		svc.CreateFacility,
		connect.WithSchema(facilitiesServiceCreateFacilityMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	facilitiesServiceUpdateFacilityHandler := connect.NewUnaryHandler(
		FacilitiesServiceUpdateFacilityProcedure,
		svc.UpdateFacility,
		connect.WithSchema(facilitiesServiceUpdateFacilityMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	facilitiesServiceDeleteFacilityHandler := connect.NewUnaryHandler(
		FacilitiesServiceDeleteFacilityProcedure,
		svc.DeleteFacility,
		connect.WithSchema(facilitiesServiceDeleteFacilityMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	facilitiesServiceCreateFacilityCategoryHandler := connect.NewUnaryHandler(
		FacilitiesServiceCreateFacilityCategoryProcedure,
		svc.CreateFacilityCategory,
		connect.WithSchema(facilitiesServiceCreateFacilityCategoryMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	facilitiesServiceUpdateFacilityCategoryHandler := connect.NewUnaryHandler(
		FacilitiesServiceUpdateFacilityCategoryProcedure,
		svc.UpdateFacilityCategory,
		connect.WithSchema(facilitiesServiceUpdateFacilityCategoryMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	facilitiesServiceDeleteFacilityCategoryHandler := connect.NewUnaryHandler(
		FacilitiesServiceDeleteFacilityCategoryProcedure,
		svc.DeleteFacilityCategory,
		connect.WithSchema(facilitiesServiceDeleteFacilityCategoryMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/api.facilities.FacilitiesService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case FacilitiesServiceGetAllFacilitiesProcedure:
			facilitiesServiceGetAllFacilitiesHandler.ServeHTTP(w, r)
		case FacilitiesServiceGetFacilityProcedure:
			facilitiesServiceGetFacilityHandler.ServeHTTP(w, r)
		case FacilitiesServiceGetFacilityCategoriesProcedure:
			facilitiesServiceGetFacilityCategoriesHandler.ServeHTTP(w, r)
		case FacilitiesServiceGetBuildingFacilitiesProcedure:
			facilitiesServiceGetBuildingFacilitiesHandler.ServeHTTP(w, r)
		case FacilitiesServiceCreateFacilityProcedure:
			facilitiesServiceCreateFacilityHandler.ServeHTTP(w, r)
		case FacilitiesServiceUpdateFacilityProcedure:
			facilitiesServiceUpdateFacilityHandler.ServeHTTP(w, r)
		case FacilitiesServiceDeleteFacilityProcedure:
			facilitiesServiceDeleteFacilityHandler.ServeHTTP(w, r)
		case FacilitiesServiceCreateFacilityCategoryProcedure:
			facilitiesServiceCreateFacilityCategoryHandler.ServeHTTP(w, r)
		case FacilitiesServiceUpdateFacilityCategoryProcedure:
			facilitiesServiceUpdateFacilityCategoryHandler.ServeHTTP(w, r)
		case FacilitiesServiceDeleteFacilityCategoryProcedure:
			facilitiesServiceDeleteFacilityCategoryHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedFacilitiesServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedFacilitiesServiceHandler struct{}

func (UnimplementedFacilitiesServiceHandler) GetAllFacilities(context.Context, *connect.Request[facilities.GetAllFacilitiesRequest]) (*connect.Response[facilities.GetAllFacilitiesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.facilities.FacilitiesService.GetAllFacilities is not implemented"))
}

func (UnimplementedFacilitiesServiceHandler) GetFacility(context.Context, *connect.Request[facilities.GetFacilityRequest]) (*connect.Response[facilities.FacilityWithCategories], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.facilities.FacilitiesService.GetFacility is not implemented"))
}

func (UnimplementedFacilitiesServiceHandler) GetFacilityCategories(context.Context, *connect.Request[facilities.GetFacilityCategoriesRequest]) (*connect.Response[facilities.GetFacilityCategoriesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.facilities.FacilitiesService.GetFacilityCategories is not implemented"))
}

func (UnimplementedFacilitiesServiceHandler) GetBuildingFacilities(context.Context, *connect.Request[facilities.GetBuildingFacilitiesRequest]) (*connect.Response[facilities.GetBuildingFacilitiesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.facilities.FacilitiesService.GetBuildingFacilities is not implemented"))
}

func (UnimplementedFacilitiesServiceHandler) CreateFacility(context.Context, *connect.Request[facilities.CreateFacilityRequest]) (*connect.Response[facilities.FacilityWithCategories], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.facilities.FacilitiesService.CreateFacility is not implemented"))
}

func (UnimplementedFacilitiesServiceHandler) UpdateFacility(context.Context, *connect.Request[facilities.UpdateFacilityRequest]) (*connect.Response[facilities.FacilityWithCategories], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.facilities.FacilitiesService.UpdateFacility is not implemented"))
}

func (UnimplementedFacilitiesServiceHandler) DeleteFacility(context.Context, *connect.Request[facilities.DeleteFacilityRequest]) (*connect.Response[facilities.DeleteFacilityResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.facilities.FacilitiesService.DeleteFacility is not implemented"))
}

func (UnimplementedFacilitiesServiceHandler) CreateFacilityCategory(context.Context, *connect.Request[facilities.CreateFacilityCategoryRequest]) (*connect.Response[facilities.Category], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.facilities.FacilitiesService.CreateFacilityCategory is not implemented"))
}

func (UnimplementedFacilitiesServiceHandler) UpdateFacilityCategory(context.Context, *connect.Request[facilities.UpdateFacilityCategoryRequest]) (*connect.Response[facilities.Category], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.facilities.FacilitiesService.UpdateFacilityCategory is not implemented"))
}

func (UnimplementedFacilitiesServiceHandler) DeleteFacilityCategory(context.Context, *connect.Request[facilities.DeleteFacilityCategoryRequest]) (*connect.Response[facilities.DeleteFacilityCategoryResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.facilities.FacilitiesService.DeleteFacilityCategory is not implemented"))
}
