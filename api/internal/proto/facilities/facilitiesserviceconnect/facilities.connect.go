// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: proto/facilities/facilities.proto

package facilitiesserviceconnect

import (
	facilities "api/internal/proto/facilities"
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// FacilitiesServiceName is the fully-qualified name of the FacilitiesService service.
	FacilitiesServiceName = "api.facilities.FacilitiesService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// FacilitiesServiceGetAllFacilitiesProcedure is the fully-qualified name of the FacilitiesService's
	// GetAllFacilities RPC.
	FacilitiesServiceGetAllFacilitiesProcedure = "/api.facilities.FacilitiesService/GetAllFacilities"
	// FacilitiesServiceGetAllBuildingsProcedure is the fully-qualified name of the FacilitiesService's
	// GetAllBuildings RPC.
	FacilitiesServiceGetAllBuildingsProcedure = "/api.facilities.FacilitiesService/GetAllBuildings"
	// FacilitiesServiceGetFacilityProcedure is the fully-qualified name of the FacilitiesService's
	// GetFacility RPC.
	FacilitiesServiceGetFacilityProcedure = "/api.facilities.FacilitiesService/GetFacility"
	// FacilitiesServiceGetEventsByFacilityProcedure is the fully-qualified name of the
	// FacilitiesService's GetEventsByFacility RPC.
	FacilitiesServiceGetEventsByFacilityProcedure = "/api.facilities.FacilitiesService/GetEventsByFacility"
	// FacilitiesServiceGetEventsByBuildingProcedure is the fully-qualified name of the
	// FacilitiesService's GetEventsByBuilding RPC.
	FacilitiesServiceGetEventsByBuildingProcedure = "/api.facilities.FacilitiesService/GetEventsByBuilding"
	// FacilitiesServiceGetAllEventsProcedure is the fully-qualified name of the FacilitiesService's
	// GetAllEvents RPC.
	FacilitiesServiceGetAllEventsProcedure = "/api.facilities.FacilitiesService/GetAllEvents"
	// FacilitiesServiceGetFacilityCategoriesProcedure is the fully-qualified name of the
	// FacilitiesService's GetFacilityCategories RPC.
	FacilitiesServiceGetFacilityCategoriesProcedure = "/api.facilities.FacilitiesService/GetFacilityCategories"
	// FacilitiesServiceGetBuildingFacilitiesProcedure is the fully-qualified name of the
	// FacilitiesService's GetBuildingFacilities RPC.
	FacilitiesServiceGetBuildingFacilitiesProcedure = "/api.facilities.FacilitiesService/GetBuildingFacilities"
	// FacilitiesServiceCreateFacilityProcedure is the fully-qualified name of the FacilitiesService's
	// CreateFacility RPC.
	FacilitiesServiceCreateFacilityProcedure = "/api.facilities.FacilitiesService/CreateFacility"
	// FacilitiesServiceUpdateFacilityProcedure is the fully-qualified name of the FacilitiesService's
	// UpdateFacility RPC.
	FacilitiesServiceUpdateFacilityProcedure = "/api.facilities.FacilitiesService/UpdateFacility"
	// FacilitiesServiceDeleteFacilityProcedure is the fully-qualified name of the FacilitiesService's
	// DeleteFacility RPC.
	FacilitiesServiceDeleteFacilityProcedure = "/api.facilities.FacilitiesService/DeleteFacility"
	// FacilitiesServiceUpdateFacilityCategoryProcedure is the fully-qualified name of the
	// FacilitiesService's UpdateFacilityCategory RPC.
	FacilitiesServiceUpdateFacilityCategoryProcedure = "/api.facilities.FacilitiesService/UpdateFacilityCategory"
)

// FacilitiesServiceClient is a client for the api.facilities.FacilitiesService service.
type FacilitiesServiceClient interface {
	GetAllFacilities(context.Context, *connect.Request[facilities.GetAllFacilitiesRequest]) (*connect.Response[facilities.GetAllFacilitiesResponse], error)
	GetAllBuildings(context.Context, *connect.Request[facilities.GetAllBuildingsRequest]) (*connect.Response[facilities.GetAllBuildingsResponse], error)
	GetFacility(context.Context, *connect.Request[facilities.GetFacilityRequest]) (*connect.Response[facilities.FullFacility], error)
	GetEventsByFacility(context.Context, *connect.Request[facilities.GetEventsByFacilityRequest]) (*connect.Response[facilities.GetEventsByFacilityResponse], error)
	GetEventsByBuilding(context.Context, *connect.Request[facilities.GetEventsByBuildingRequest]) (*connect.Response[facilities.GetEventsByBuildingResponse], error)
	GetAllEvents(context.Context, *connect.Request[facilities.GetAllEventsRequest]) (*connect.Response[facilities.GetAllEventsResponse], error)
	GetFacilityCategories(context.Context, *connect.Request[facilities.GetFacilityCategoriesRequest]) (*connect.Response[facilities.GetFacilityCategoriesResponse], error)
	GetBuildingFacilities(context.Context, *connect.Request[facilities.GetBuildingFacilitiesRequest]) (*connect.Response[facilities.GetBuildingFacilitiesResponse], error)
	CreateFacility(context.Context, *connect.Request[facilities.CreateFacilityRequest]) (*connect.Response[facilities.CreateFacilityResponse], error)
	UpdateFacility(context.Context, *connect.Request[facilities.UpdateFacilityRequest]) (*connect.Response[facilities.UpdateFacilityResponse], error)
	DeleteFacility(context.Context, *connect.Request[facilities.DeleteFacilityRequest]) (*connect.Response[facilities.DeleteFacilityResponse], error)
	UpdateFacilityCategory(context.Context, *connect.Request[facilities.UpdateFacilityCategoryRequest]) (*connect.Response[facilities.Category], error)
}

// NewFacilitiesServiceClient constructs a client for the api.facilities.FacilitiesService service.
// By default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped
// responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewFacilitiesServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) FacilitiesServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	facilitiesServiceMethods := facilities.File_proto_facilities_facilities_proto.Services().ByName("FacilitiesService").Methods()
	return &facilitiesServiceClient{
		getAllFacilities: connect.NewClient[facilities.GetAllFacilitiesRequest, facilities.GetAllFacilitiesResponse](
			httpClient,
			baseURL+FacilitiesServiceGetAllFacilitiesProcedure,
			connect.WithSchema(facilitiesServiceMethods.ByName("GetAllFacilities")),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		getAllBuildings: connect.NewClient[facilities.GetAllBuildingsRequest, facilities.GetAllBuildingsResponse](
			httpClient,
			baseURL+FacilitiesServiceGetAllBuildingsProcedure,
			connect.WithSchema(facilitiesServiceMethods.ByName("GetAllBuildings")),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		getFacility: connect.NewClient[facilities.GetFacilityRequest, facilities.FullFacility](
			httpClient,
			baseURL+FacilitiesServiceGetFacilityProcedure,
			connect.WithSchema(facilitiesServiceMethods.ByName("GetFacility")),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		getEventsByFacility: connect.NewClient[facilities.GetEventsByFacilityRequest, facilities.GetEventsByFacilityResponse](
			httpClient,
			baseURL+FacilitiesServiceGetEventsByFacilityProcedure,
			connect.WithSchema(facilitiesServiceMethods.ByName("GetEventsByFacility")),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		getEventsByBuilding: connect.NewClient[facilities.GetEventsByBuildingRequest, facilities.GetEventsByBuildingResponse](
			httpClient,
			baseURL+FacilitiesServiceGetEventsByBuildingProcedure,
			connect.WithSchema(facilitiesServiceMethods.ByName("GetEventsByBuilding")),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		getAllEvents: connect.NewClient[facilities.GetAllEventsRequest, facilities.GetAllEventsResponse](
			httpClient,
			baseURL+FacilitiesServiceGetAllEventsProcedure,
			connect.WithSchema(facilitiesServiceMethods.ByName("GetAllEvents")),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		getFacilityCategories: connect.NewClient[facilities.GetFacilityCategoriesRequest, facilities.GetFacilityCategoriesResponse](
			httpClient,
			baseURL+FacilitiesServiceGetFacilityCategoriesProcedure,
			connect.WithSchema(facilitiesServiceMethods.ByName("GetFacilityCategories")),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		getBuildingFacilities: connect.NewClient[facilities.GetBuildingFacilitiesRequest, facilities.GetBuildingFacilitiesResponse](
			httpClient,
			baseURL+FacilitiesServiceGetBuildingFacilitiesProcedure,
			connect.WithSchema(facilitiesServiceMethods.ByName("GetBuildingFacilities")),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		createFacility: connect.NewClient[facilities.CreateFacilityRequest, facilities.CreateFacilityResponse](
			httpClient,
			baseURL+FacilitiesServiceCreateFacilityProcedure,
			connect.WithSchema(facilitiesServiceMethods.ByName("CreateFacility")),
			connect.WithClientOptions(opts...),
		),
		updateFacility: connect.NewClient[facilities.UpdateFacilityRequest, facilities.UpdateFacilityResponse](
			httpClient,
			baseURL+FacilitiesServiceUpdateFacilityProcedure,
			connect.WithSchema(facilitiesServiceMethods.ByName("UpdateFacility")),
			connect.WithClientOptions(opts...),
		),
		deleteFacility: connect.NewClient[facilities.DeleteFacilityRequest, facilities.DeleteFacilityResponse](
			httpClient,
			baseURL+FacilitiesServiceDeleteFacilityProcedure,
			connect.WithSchema(facilitiesServiceMethods.ByName("DeleteFacility")),
			connect.WithClientOptions(opts...),
		),
		updateFacilityCategory: connect.NewClient[facilities.UpdateFacilityCategoryRequest, facilities.Category](
			httpClient,
			baseURL+FacilitiesServiceUpdateFacilityCategoryProcedure,
			connect.WithSchema(facilitiesServiceMethods.ByName("UpdateFacilityCategory")),
			connect.WithClientOptions(opts...),
		),
	}
}

// facilitiesServiceClient implements FacilitiesServiceClient.
type facilitiesServiceClient struct {
	getAllFacilities       *connect.Client[facilities.GetAllFacilitiesRequest, facilities.GetAllFacilitiesResponse]
	getAllBuildings        *connect.Client[facilities.GetAllBuildingsRequest, facilities.GetAllBuildingsResponse]
	getFacility            *connect.Client[facilities.GetFacilityRequest, facilities.FullFacility]
	getEventsByFacility    *connect.Client[facilities.GetEventsByFacilityRequest, facilities.GetEventsByFacilityResponse]
	getEventsByBuilding    *connect.Client[facilities.GetEventsByBuildingRequest, facilities.GetEventsByBuildingResponse]
	getAllEvents           *connect.Client[facilities.GetAllEventsRequest, facilities.GetAllEventsResponse]
	getFacilityCategories  *connect.Client[facilities.GetFacilityCategoriesRequest, facilities.GetFacilityCategoriesResponse]
	getBuildingFacilities  *connect.Client[facilities.GetBuildingFacilitiesRequest, facilities.GetBuildingFacilitiesResponse]
	createFacility         *connect.Client[facilities.CreateFacilityRequest, facilities.CreateFacilityResponse]
	updateFacility         *connect.Client[facilities.UpdateFacilityRequest, facilities.UpdateFacilityResponse]
	deleteFacility         *connect.Client[facilities.DeleteFacilityRequest, facilities.DeleteFacilityResponse]
	updateFacilityCategory *connect.Client[facilities.UpdateFacilityCategoryRequest, facilities.Category]
}

// GetAllFacilities calls api.facilities.FacilitiesService.GetAllFacilities.
func (c *facilitiesServiceClient) GetAllFacilities(ctx context.Context, req *connect.Request[facilities.GetAllFacilitiesRequest]) (*connect.Response[facilities.GetAllFacilitiesResponse], error) {
	return c.getAllFacilities.CallUnary(ctx, req)
}

// GetAllBuildings calls api.facilities.FacilitiesService.GetAllBuildings.
func (c *facilitiesServiceClient) GetAllBuildings(ctx context.Context, req *connect.Request[facilities.GetAllBuildingsRequest]) (*connect.Response[facilities.GetAllBuildingsResponse], error) {
	return c.getAllBuildings.CallUnary(ctx, req)
}

// GetFacility calls api.facilities.FacilitiesService.GetFacility.
func (c *facilitiesServiceClient) GetFacility(ctx context.Context, req *connect.Request[facilities.GetFacilityRequest]) (*connect.Response[facilities.FullFacility], error) {
	return c.getFacility.CallUnary(ctx, req)
}

// GetEventsByFacility calls api.facilities.FacilitiesService.GetEventsByFacility.
func (c *facilitiesServiceClient) GetEventsByFacility(ctx context.Context, req *connect.Request[facilities.GetEventsByFacilityRequest]) (*connect.Response[facilities.GetEventsByFacilityResponse], error) {
	return c.getEventsByFacility.CallUnary(ctx, req)
}

// GetEventsByBuilding calls api.facilities.FacilitiesService.GetEventsByBuilding.
func (c *facilitiesServiceClient) GetEventsByBuilding(ctx context.Context, req *connect.Request[facilities.GetEventsByBuildingRequest]) (*connect.Response[facilities.GetEventsByBuildingResponse], error) {
	return c.getEventsByBuilding.CallUnary(ctx, req)
}

// GetAllEvents calls api.facilities.FacilitiesService.GetAllEvents.
func (c *facilitiesServiceClient) GetAllEvents(ctx context.Context, req *connect.Request[facilities.GetAllEventsRequest]) (*connect.Response[facilities.GetAllEventsResponse], error) {
	return c.getAllEvents.CallUnary(ctx, req)
}

// GetFacilityCategories calls api.facilities.FacilitiesService.GetFacilityCategories.
func (c *facilitiesServiceClient) GetFacilityCategories(ctx context.Context, req *connect.Request[facilities.GetFacilityCategoriesRequest]) (*connect.Response[facilities.GetFacilityCategoriesResponse], error) {
	return c.getFacilityCategories.CallUnary(ctx, req)
}

// GetBuildingFacilities calls api.facilities.FacilitiesService.GetBuildingFacilities.
func (c *facilitiesServiceClient) GetBuildingFacilities(ctx context.Context, req *connect.Request[facilities.GetBuildingFacilitiesRequest]) (*connect.Response[facilities.GetBuildingFacilitiesResponse], error) {
	return c.getBuildingFacilities.CallUnary(ctx, req)
}

// CreateFacility calls api.facilities.FacilitiesService.CreateFacility.
func (c *facilitiesServiceClient) CreateFacility(ctx context.Context, req *connect.Request[facilities.CreateFacilityRequest]) (*connect.Response[facilities.CreateFacilityResponse], error) {
	return c.createFacility.CallUnary(ctx, req)
}

// UpdateFacility calls api.facilities.FacilitiesService.UpdateFacility.
func (c *facilitiesServiceClient) UpdateFacility(ctx context.Context, req *connect.Request[facilities.UpdateFacilityRequest]) (*connect.Response[facilities.UpdateFacilityResponse], error) {
	return c.updateFacility.CallUnary(ctx, req)
}

// DeleteFacility calls api.facilities.FacilitiesService.DeleteFacility.
func (c *facilitiesServiceClient) DeleteFacility(ctx context.Context, req *connect.Request[facilities.DeleteFacilityRequest]) (*connect.Response[facilities.DeleteFacilityResponse], error) {
	return c.deleteFacility.CallUnary(ctx, req)
}

// UpdateFacilityCategory calls api.facilities.FacilitiesService.UpdateFacilityCategory.
func (c *facilitiesServiceClient) UpdateFacilityCategory(ctx context.Context, req *connect.Request[facilities.UpdateFacilityCategoryRequest]) (*connect.Response[facilities.Category], error) {
	return c.updateFacilityCategory.CallUnary(ctx, req)
}

// FacilitiesServiceHandler is an implementation of the api.facilities.FacilitiesService service.
type FacilitiesServiceHandler interface {
	GetAllFacilities(context.Context, *connect.Request[facilities.GetAllFacilitiesRequest]) (*connect.Response[facilities.GetAllFacilitiesResponse], error)
	GetAllBuildings(context.Context, *connect.Request[facilities.GetAllBuildingsRequest]) (*connect.Response[facilities.GetAllBuildingsResponse], error)
	GetFacility(context.Context, *connect.Request[facilities.GetFacilityRequest]) (*connect.Response[facilities.FullFacility], error)
	GetEventsByFacility(context.Context, *connect.Request[facilities.GetEventsByFacilityRequest]) (*connect.Response[facilities.GetEventsByFacilityResponse], error)
	GetEventsByBuilding(context.Context, *connect.Request[facilities.GetEventsByBuildingRequest]) (*connect.Response[facilities.GetEventsByBuildingResponse], error)
	GetAllEvents(context.Context, *connect.Request[facilities.GetAllEventsRequest]) (*connect.Response[facilities.GetAllEventsResponse], error)
	GetFacilityCategories(context.Context, *connect.Request[facilities.GetFacilityCategoriesRequest]) (*connect.Response[facilities.GetFacilityCategoriesResponse], error)
	GetBuildingFacilities(context.Context, *connect.Request[facilities.GetBuildingFacilitiesRequest]) (*connect.Response[facilities.GetBuildingFacilitiesResponse], error)
	CreateFacility(context.Context, *connect.Request[facilities.CreateFacilityRequest]) (*connect.Response[facilities.CreateFacilityResponse], error)
	UpdateFacility(context.Context, *connect.Request[facilities.UpdateFacilityRequest]) (*connect.Response[facilities.UpdateFacilityResponse], error)
	DeleteFacility(context.Context, *connect.Request[facilities.DeleteFacilityRequest]) (*connect.Response[facilities.DeleteFacilityResponse], error)
	UpdateFacilityCategory(context.Context, *connect.Request[facilities.UpdateFacilityCategoryRequest]) (*connect.Response[facilities.Category], error)
}

// NewFacilitiesServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewFacilitiesServiceHandler(svc FacilitiesServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	facilitiesServiceMethods := facilities.File_proto_facilities_facilities_proto.Services().ByName("FacilitiesService").Methods()
	facilitiesServiceGetAllFacilitiesHandler := connect.NewUnaryHandler(
		FacilitiesServiceGetAllFacilitiesProcedure,
		svc.GetAllFacilities,
		connect.WithSchema(facilitiesServiceMethods.ByName("GetAllFacilities")),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	facilitiesServiceGetAllBuildingsHandler := connect.NewUnaryHandler(
		FacilitiesServiceGetAllBuildingsProcedure,
		svc.GetAllBuildings,
		connect.WithSchema(facilitiesServiceMethods.ByName("GetAllBuildings")),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	facilitiesServiceGetFacilityHandler := connect.NewUnaryHandler(
		FacilitiesServiceGetFacilityProcedure,
		svc.GetFacility,
		connect.WithSchema(facilitiesServiceMethods.ByName("GetFacility")),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	facilitiesServiceGetEventsByFacilityHandler := connect.NewUnaryHandler(
		FacilitiesServiceGetEventsByFacilityProcedure,
		svc.GetEventsByFacility,
		connect.WithSchema(facilitiesServiceMethods.ByName("GetEventsByFacility")),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	facilitiesServiceGetEventsByBuildingHandler := connect.NewUnaryHandler(
		FacilitiesServiceGetEventsByBuildingProcedure,
		svc.GetEventsByBuilding,
		connect.WithSchema(facilitiesServiceMethods.ByName("GetEventsByBuilding")),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	facilitiesServiceGetAllEventsHandler := connect.NewUnaryHandler(
		FacilitiesServiceGetAllEventsProcedure,
		svc.GetAllEvents,
		connect.WithSchema(facilitiesServiceMethods.ByName("GetAllEvents")),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	facilitiesServiceGetFacilityCategoriesHandler := connect.NewUnaryHandler(
		FacilitiesServiceGetFacilityCategoriesProcedure,
		svc.GetFacilityCategories,
		connect.WithSchema(facilitiesServiceMethods.ByName("GetFacilityCategories")),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	facilitiesServiceGetBuildingFacilitiesHandler := connect.NewUnaryHandler(
		FacilitiesServiceGetBuildingFacilitiesProcedure,
		svc.GetBuildingFacilities,
		connect.WithSchema(facilitiesServiceMethods.ByName("GetBuildingFacilities")),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	facilitiesServiceCreateFacilityHandler := connect.NewUnaryHandler(
		FacilitiesServiceCreateFacilityProcedure,
		svc.CreateFacility,
		connect.WithSchema(facilitiesServiceMethods.ByName("CreateFacility")),
		connect.WithHandlerOptions(opts...),
	)
	facilitiesServiceUpdateFacilityHandler := connect.NewUnaryHandler(
		FacilitiesServiceUpdateFacilityProcedure,
		svc.UpdateFacility,
		connect.WithSchema(facilitiesServiceMethods.ByName("UpdateFacility")),
		connect.WithHandlerOptions(opts...),
	)
	facilitiesServiceDeleteFacilityHandler := connect.NewUnaryHandler(
		FacilitiesServiceDeleteFacilityProcedure,
		svc.DeleteFacility,
		connect.WithSchema(facilitiesServiceMethods.ByName("DeleteFacility")),
		connect.WithHandlerOptions(opts...),
	)
	facilitiesServiceUpdateFacilityCategoryHandler := connect.NewUnaryHandler(
		FacilitiesServiceUpdateFacilityCategoryProcedure,
		svc.UpdateFacilityCategory,
		connect.WithSchema(facilitiesServiceMethods.ByName("UpdateFacilityCategory")),
		connect.WithHandlerOptions(opts...),
	)
	return "/api.facilities.FacilitiesService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case FacilitiesServiceGetAllFacilitiesProcedure:
			facilitiesServiceGetAllFacilitiesHandler.ServeHTTP(w, r)
		case FacilitiesServiceGetAllBuildingsProcedure:
			facilitiesServiceGetAllBuildingsHandler.ServeHTTP(w, r)
		case FacilitiesServiceGetFacilityProcedure:
			facilitiesServiceGetFacilityHandler.ServeHTTP(w, r)
		case FacilitiesServiceGetEventsByFacilityProcedure:
			facilitiesServiceGetEventsByFacilityHandler.ServeHTTP(w, r)
		case FacilitiesServiceGetEventsByBuildingProcedure:
			facilitiesServiceGetEventsByBuildingHandler.ServeHTTP(w, r)
		case FacilitiesServiceGetAllEventsProcedure:
			facilitiesServiceGetAllEventsHandler.ServeHTTP(w, r)
		case FacilitiesServiceGetFacilityCategoriesProcedure:
			facilitiesServiceGetFacilityCategoriesHandler.ServeHTTP(w, r)
		case FacilitiesServiceGetBuildingFacilitiesProcedure:
			facilitiesServiceGetBuildingFacilitiesHandler.ServeHTTP(w, r)
		case FacilitiesServiceCreateFacilityProcedure:
			facilitiesServiceCreateFacilityHandler.ServeHTTP(w, r)
		case FacilitiesServiceUpdateFacilityProcedure:
			facilitiesServiceUpdateFacilityHandler.ServeHTTP(w, r)
		case FacilitiesServiceDeleteFacilityProcedure:
			facilitiesServiceDeleteFacilityHandler.ServeHTTP(w, r)
		case FacilitiesServiceUpdateFacilityCategoryProcedure:
			facilitiesServiceUpdateFacilityCategoryHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedFacilitiesServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedFacilitiesServiceHandler struct{}

func (UnimplementedFacilitiesServiceHandler) GetAllFacilities(context.Context, *connect.Request[facilities.GetAllFacilitiesRequest]) (*connect.Response[facilities.GetAllFacilitiesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.facilities.FacilitiesService.GetAllFacilities is not implemented"))
}

func (UnimplementedFacilitiesServiceHandler) GetAllBuildings(context.Context, *connect.Request[facilities.GetAllBuildingsRequest]) (*connect.Response[facilities.GetAllBuildingsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.facilities.FacilitiesService.GetAllBuildings is not implemented"))
}

func (UnimplementedFacilitiesServiceHandler) GetFacility(context.Context, *connect.Request[facilities.GetFacilityRequest]) (*connect.Response[facilities.FullFacility], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.facilities.FacilitiesService.GetFacility is not implemented"))
}

func (UnimplementedFacilitiesServiceHandler) GetEventsByFacility(context.Context, *connect.Request[facilities.GetEventsByFacilityRequest]) (*connect.Response[facilities.GetEventsByFacilityResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.facilities.FacilitiesService.GetEventsByFacility is not implemented"))
}

func (UnimplementedFacilitiesServiceHandler) GetEventsByBuilding(context.Context, *connect.Request[facilities.GetEventsByBuildingRequest]) (*connect.Response[facilities.GetEventsByBuildingResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.facilities.FacilitiesService.GetEventsByBuilding is not implemented"))
}

func (UnimplementedFacilitiesServiceHandler) GetAllEvents(context.Context, *connect.Request[facilities.GetAllEventsRequest]) (*connect.Response[facilities.GetAllEventsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.facilities.FacilitiesService.GetAllEvents is not implemented"))
}

func (UnimplementedFacilitiesServiceHandler) GetFacilityCategories(context.Context, *connect.Request[facilities.GetFacilityCategoriesRequest]) (*connect.Response[facilities.GetFacilityCategoriesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.facilities.FacilitiesService.GetFacilityCategories is not implemented"))
}

func (UnimplementedFacilitiesServiceHandler) GetBuildingFacilities(context.Context, *connect.Request[facilities.GetBuildingFacilitiesRequest]) (*connect.Response[facilities.GetBuildingFacilitiesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.facilities.FacilitiesService.GetBuildingFacilities is not implemented"))
}

func (UnimplementedFacilitiesServiceHandler) CreateFacility(context.Context, *connect.Request[facilities.CreateFacilityRequest]) (*connect.Response[facilities.CreateFacilityResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.facilities.FacilitiesService.CreateFacility is not implemented"))
}

func (UnimplementedFacilitiesServiceHandler) UpdateFacility(context.Context, *connect.Request[facilities.UpdateFacilityRequest]) (*connect.Response[facilities.UpdateFacilityResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.facilities.FacilitiesService.UpdateFacility is not implemented"))
}

func (UnimplementedFacilitiesServiceHandler) DeleteFacility(context.Context, *connect.Request[facilities.DeleteFacilityRequest]) (*connect.Response[facilities.DeleteFacilityResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.facilities.FacilitiesService.DeleteFacility is not implemented"))
}

func (UnimplementedFacilitiesServiceHandler) UpdateFacilityCategory(context.Context, *connect.Request[facilities.UpdateFacilityCategoryRequest]) (*connect.Response[facilities.Category], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.facilities.FacilitiesService.UpdateFacilityCategory is not implemented"))
}
