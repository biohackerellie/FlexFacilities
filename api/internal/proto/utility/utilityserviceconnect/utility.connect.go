// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: proto/utility/utility.proto

package utilityserviceconnect

import (
	utility "api/internal/proto/utility"
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// UtilityServiceName is the fully-qualified name of the UtilityService service.
	UtilityServiceName = "api.utility.UtilityService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// UtilityServiceAggregateChartDataProcedure is the fully-qualified name of the UtilityService's
	// AggregateChartData RPC.
	UtilityServiceAggregateChartDataProcedure = "/api.utility.UtilityService/AggregateChartData"
)

// UtilityServiceClient is a client for the api.utility.UtilityService service.
type UtilityServiceClient interface {
	AggregateChartData(context.Context, *connect.Request[utility.AggregateChartDataRequest]) (*connect.Response[utility.AggregateChartDataResponse], error)
}

// NewUtilityServiceClient constructs a client for the api.utility.UtilityService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewUtilityServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) UtilityServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	utilityServiceMethods := utility.File_proto_utility_utility_proto.Services().ByName("UtilityService").Methods()
	return &utilityServiceClient{
		aggregateChartData: connect.NewClient[utility.AggregateChartDataRequest, utility.AggregateChartDataResponse](
			httpClient,
			baseURL+UtilityServiceAggregateChartDataProcedure,
			connect.WithSchema(utilityServiceMethods.ByName("AggregateChartData")),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
	}
}

// utilityServiceClient implements UtilityServiceClient.
type utilityServiceClient struct {
	aggregateChartData *connect.Client[utility.AggregateChartDataRequest, utility.AggregateChartDataResponse]
}

// AggregateChartData calls api.utility.UtilityService.AggregateChartData.
func (c *utilityServiceClient) AggregateChartData(ctx context.Context, req *connect.Request[utility.AggregateChartDataRequest]) (*connect.Response[utility.AggregateChartDataResponse], error) {
	return c.aggregateChartData.CallUnary(ctx, req)
}

// UtilityServiceHandler is an implementation of the api.utility.UtilityService service.
type UtilityServiceHandler interface {
	AggregateChartData(context.Context, *connect.Request[utility.AggregateChartDataRequest]) (*connect.Response[utility.AggregateChartDataResponse], error)
}

// NewUtilityServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewUtilityServiceHandler(svc UtilityServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	utilityServiceMethods := utility.File_proto_utility_utility_proto.Services().ByName("UtilityService").Methods()
	utilityServiceAggregateChartDataHandler := connect.NewUnaryHandler(
		UtilityServiceAggregateChartDataProcedure,
		svc.AggregateChartData,
		connect.WithSchema(utilityServiceMethods.ByName("AggregateChartData")),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	return "/api.utility.UtilityService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case UtilityServiceAggregateChartDataProcedure:
			utilityServiceAggregateChartDataHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedUtilityServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedUtilityServiceHandler struct{}

func (UnimplementedUtilityServiceHandler) AggregateChartData(context.Context, *connect.Request[utility.AggregateChartDataRequest]) (*connect.Response[utility.AggregateChartDataResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.utility.UtilityService.AggregateChartData is not implemented"))
}
