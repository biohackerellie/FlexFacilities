// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: proto/users/users.proto

package usersserviceconnect

import (
	users "api/internal/proto/users"
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// UsersServiceName is the fully-qualified name of the UsersService service.
	UsersServiceName = "api.users.UsersService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// UsersServiceGetUserByEmailProcedure is the fully-qualified name of the UsersService's
	// GetUserByEmail RPC.
	UsersServiceGetUserByEmailProcedure = "/api.users.UsersService/GetUserByEmail"
	// UsersServiceGetUserProcedure is the fully-qualified name of the UsersService's GetUser RPC.
	UsersServiceGetUserProcedure = "/api.users.UsersService/GetUser"
	// UsersServiceGetUsersProcedure is the fully-qualified name of the UsersService's GetUsers RPC.
	UsersServiceGetUsersProcedure = "/api.users.UsersService/GetUsers"
	// UsersServiceCreateUserProcedure is the fully-qualified name of the UsersService's CreateUser RPC.
	UsersServiceCreateUserProcedure = "/api.users.UsersService/CreateUser"
	// UsersServiceUpdateUserProcedure is the fully-qualified name of the UsersService's UpdateUser RPC.
	UsersServiceUpdateUserProcedure = "/api.users.UsersService/UpdateUser"
	// UsersServiceDeleteUserProcedure is the fully-qualified name of the UsersService's DeleteUser RPC.
	UsersServiceDeleteUserProcedure = "/api.users.UsersService/DeleteUser"
	// UsersServiceGetNotificationsProcedure is the fully-qualified name of the UsersService's
	// GetNotifications RPC.
	UsersServiceGetNotificationsProcedure = "/api.users.UsersService/GetNotifications"
	// UsersServiceGetUserNotificationsProcedure is the fully-qualified name of the UsersService's
	// GetUserNotifications RPC.
	UsersServiceGetUserNotificationsProcedure = "/api.users.UsersService/GetUserNotifications"
	// UsersServiceCreateNotificationProcedure is the fully-qualified name of the UsersService's
	// CreateNotification RPC.
	UsersServiceCreateNotificationProcedure = "/api.users.UsersService/CreateNotification"
	// UsersServiceEditNotificationProcedure is the fully-qualified name of the UsersService's
	// EditNotification RPC.
	UsersServiceEditNotificationProcedure = "/api.users.UsersService/EditNotification"
	// UsersServiceDeleteNotificationProcedure is the fully-qualified name of the UsersService's
	// DeleteNotification RPC.
	UsersServiceDeleteNotificationProcedure = "/api.users.UsersService/DeleteNotification"
)

// UsersServiceClient is a client for the api.users.UsersService service.
type UsersServiceClient interface {
	GetUserByEmail(context.Context, *connect.Request[users.UserByEmailRequest]) (*connect.Response[users.Users], error)
	GetUser(context.Context, *connect.Request[users.GetUserRequest]) (*connect.Response[users.Users], error)
	GetUsers(context.Context, *connect.Request[users.GetUsersRequest]) (*connect.Response[users.GetUsersResponse], error)
	CreateUser(context.Context, *connect.Request[users.CreateUserRequest]) (*connect.Response[users.Users], error)
	UpdateUser(context.Context, *connect.Request[users.UpdateUserRequest]) (*connect.Response[users.Users], error)
	DeleteUser(context.Context, *connect.Request[users.DeleteUserRequest]) (*connect.Response[users.DeleteUserResponse], error)
	GetNotifications(context.Context, *connect.Request[users.GetNotificationsRequest]) (*connect.Response[users.GetNotificationsResponse], error)
	GetUserNotifications(context.Context, *connect.Request[users.GetUserNotificationsRequest]) (*connect.Response[users.GetUserNotificationsResponse], error)
	CreateNotification(context.Context, *connect.Request[users.CreateNotificationRequest]) (*connect.Response[users.Notifications], error)
	EditNotification(context.Context, *connect.Request[users.EditNotificationRequest]) (*connect.Response[users.Notifications], error)
	DeleteNotification(context.Context, *connect.Request[users.DeleteNotificationRequest]) (*connect.Response[users.DeleteNotificationResponse], error)
}

// NewUsersServiceClient constructs a client for the api.users.UsersService service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewUsersServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) UsersServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	usersServiceMethods := users.File_proto_users_users_proto.Services().ByName("UsersService").Methods()
	return &usersServiceClient{
		getUserByEmail: connect.NewClient[users.UserByEmailRequest, users.Users](
			httpClient,
			baseURL+UsersServiceGetUserByEmailProcedure,
			connect.WithSchema(usersServiceMethods.ByName("GetUserByEmail")),
			connect.WithClientOptions(opts...),
		),
		getUser: connect.NewClient[users.GetUserRequest, users.Users](
			httpClient,
			baseURL+UsersServiceGetUserProcedure,
			connect.WithSchema(usersServiceMethods.ByName("GetUser")),
			connect.WithClientOptions(opts...),
		),
		getUsers: connect.NewClient[users.GetUsersRequest, users.GetUsersResponse](
			httpClient,
			baseURL+UsersServiceGetUsersProcedure,
			connect.WithSchema(usersServiceMethods.ByName("GetUsers")),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		createUser: connect.NewClient[users.CreateUserRequest, users.Users](
			httpClient,
			baseURL+UsersServiceCreateUserProcedure,
			connect.WithSchema(usersServiceMethods.ByName("CreateUser")),
			connect.WithClientOptions(opts...),
		),
		updateUser: connect.NewClient[users.UpdateUserRequest, users.Users](
			httpClient,
			baseURL+UsersServiceUpdateUserProcedure,
			connect.WithSchema(usersServiceMethods.ByName("UpdateUser")),
			connect.WithClientOptions(opts...),
		),
		deleteUser: connect.NewClient[users.DeleteUserRequest, users.DeleteUserResponse](
			httpClient,
			baseURL+UsersServiceDeleteUserProcedure,
			connect.WithSchema(usersServiceMethods.ByName("DeleteUser")),
			connect.WithClientOptions(opts...),
		),
		getNotifications: connect.NewClient[users.GetNotificationsRequest, users.GetNotificationsResponse](
			httpClient,
			baseURL+UsersServiceGetNotificationsProcedure,
			connect.WithSchema(usersServiceMethods.ByName("GetNotifications")),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		getUserNotifications: connect.NewClient[users.GetUserNotificationsRequest, users.GetUserNotificationsResponse](
			httpClient,
			baseURL+UsersServiceGetUserNotificationsProcedure,
			connect.WithSchema(usersServiceMethods.ByName("GetUserNotifications")),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		createNotification: connect.NewClient[users.CreateNotificationRequest, users.Notifications](
			httpClient,
			baseURL+UsersServiceCreateNotificationProcedure,
			connect.WithSchema(usersServiceMethods.ByName("CreateNotification")),
			connect.WithClientOptions(opts...),
		),
		editNotification: connect.NewClient[users.EditNotificationRequest, users.Notifications](
			httpClient,
			baseURL+UsersServiceEditNotificationProcedure,
			connect.WithSchema(usersServiceMethods.ByName("EditNotification")),
			connect.WithClientOptions(opts...),
		),
		deleteNotification: connect.NewClient[users.DeleteNotificationRequest, users.DeleteNotificationResponse](
			httpClient,
			baseURL+UsersServiceDeleteNotificationProcedure,
			connect.WithSchema(usersServiceMethods.ByName("DeleteNotification")),
			connect.WithClientOptions(opts...),
		),
	}
}

// usersServiceClient implements UsersServiceClient.
type usersServiceClient struct {
	getUserByEmail       *connect.Client[users.UserByEmailRequest, users.Users]
	getUser              *connect.Client[users.GetUserRequest, users.Users]
	getUsers             *connect.Client[users.GetUsersRequest, users.GetUsersResponse]
	createUser           *connect.Client[users.CreateUserRequest, users.Users]
	updateUser           *connect.Client[users.UpdateUserRequest, users.Users]
	deleteUser           *connect.Client[users.DeleteUserRequest, users.DeleteUserResponse]
	getNotifications     *connect.Client[users.GetNotificationsRequest, users.GetNotificationsResponse]
	getUserNotifications *connect.Client[users.GetUserNotificationsRequest, users.GetUserNotificationsResponse]
	createNotification   *connect.Client[users.CreateNotificationRequest, users.Notifications]
	editNotification     *connect.Client[users.EditNotificationRequest, users.Notifications]
	deleteNotification   *connect.Client[users.DeleteNotificationRequest, users.DeleteNotificationResponse]
}

// GetUserByEmail calls api.users.UsersService.GetUserByEmail.
func (c *usersServiceClient) GetUserByEmail(ctx context.Context, req *connect.Request[users.UserByEmailRequest]) (*connect.Response[users.Users], error) {
	return c.getUserByEmail.CallUnary(ctx, req)
}

// GetUser calls api.users.UsersService.GetUser.
func (c *usersServiceClient) GetUser(ctx context.Context, req *connect.Request[users.GetUserRequest]) (*connect.Response[users.Users], error) {
	return c.getUser.CallUnary(ctx, req)
}

// GetUsers calls api.users.UsersService.GetUsers.
func (c *usersServiceClient) GetUsers(ctx context.Context, req *connect.Request[users.GetUsersRequest]) (*connect.Response[users.GetUsersResponse], error) {
	return c.getUsers.CallUnary(ctx, req)
}

// CreateUser calls api.users.UsersService.CreateUser.
func (c *usersServiceClient) CreateUser(ctx context.Context, req *connect.Request[users.CreateUserRequest]) (*connect.Response[users.Users], error) {
	return c.createUser.CallUnary(ctx, req)
}

// UpdateUser calls api.users.UsersService.UpdateUser.
func (c *usersServiceClient) UpdateUser(ctx context.Context, req *connect.Request[users.UpdateUserRequest]) (*connect.Response[users.Users], error) {
	return c.updateUser.CallUnary(ctx, req)
}

// DeleteUser calls api.users.UsersService.DeleteUser.
func (c *usersServiceClient) DeleteUser(ctx context.Context, req *connect.Request[users.DeleteUserRequest]) (*connect.Response[users.DeleteUserResponse], error) {
	return c.deleteUser.CallUnary(ctx, req)
}

// GetNotifications calls api.users.UsersService.GetNotifications.
func (c *usersServiceClient) GetNotifications(ctx context.Context, req *connect.Request[users.GetNotificationsRequest]) (*connect.Response[users.GetNotificationsResponse], error) {
	return c.getNotifications.CallUnary(ctx, req)
}

// GetUserNotifications calls api.users.UsersService.GetUserNotifications.
func (c *usersServiceClient) GetUserNotifications(ctx context.Context, req *connect.Request[users.GetUserNotificationsRequest]) (*connect.Response[users.GetUserNotificationsResponse], error) {
	return c.getUserNotifications.CallUnary(ctx, req)
}

// CreateNotification calls api.users.UsersService.CreateNotification.
func (c *usersServiceClient) CreateNotification(ctx context.Context, req *connect.Request[users.CreateNotificationRequest]) (*connect.Response[users.Notifications], error) {
	return c.createNotification.CallUnary(ctx, req)
}

// EditNotification calls api.users.UsersService.EditNotification.
func (c *usersServiceClient) EditNotification(ctx context.Context, req *connect.Request[users.EditNotificationRequest]) (*connect.Response[users.Notifications], error) {
	return c.editNotification.CallUnary(ctx, req)
}

// DeleteNotification calls api.users.UsersService.DeleteNotification.
func (c *usersServiceClient) DeleteNotification(ctx context.Context, req *connect.Request[users.DeleteNotificationRequest]) (*connect.Response[users.DeleteNotificationResponse], error) {
	return c.deleteNotification.CallUnary(ctx, req)
}

// UsersServiceHandler is an implementation of the api.users.UsersService service.
type UsersServiceHandler interface {
	GetUserByEmail(context.Context, *connect.Request[users.UserByEmailRequest]) (*connect.Response[users.Users], error)
	GetUser(context.Context, *connect.Request[users.GetUserRequest]) (*connect.Response[users.Users], error)
	GetUsers(context.Context, *connect.Request[users.GetUsersRequest]) (*connect.Response[users.GetUsersResponse], error)
	CreateUser(context.Context, *connect.Request[users.CreateUserRequest]) (*connect.Response[users.Users], error)
	UpdateUser(context.Context, *connect.Request[users.UpdateUserRequest]) (*connect.Response[users.Users], error)
	DeleteUser(context.Context, *connect.Request[users.DeleteUserRequest]) (*connect.Response[users.DeleteUserResponse], error)
	GetNotifications(context.Context, *connect.Request[users.GetNotificationsRequest]) (*connect.Response[users.GetNotificationsResponse], error)
	GetUserNotifications(context.Context, *connect.Request[users.GetUserNotificationsRequest]) (*connect.Response[users.GetUserNotificationsResponse], error)
	CreateNotification(context.Context, *connect.Request[users.CreateNotificationRequest]) (*connect.Response[users.Notifications], error)
	EditNotification(context.Context, *connect.Request[users.EditNotificationRequest]) (*connect.Response[users.Notifications], error)
	DeleteNotification(context.Context, *connect.Request[users.DeleteNotificationRequest]) (*connect.Response[users.DeleteNotificationResponse], error)
}

// NewUsersServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewUsersServiceHandler(svc UsersServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	usersServiceMethods := users.File_proto_users_users_proto.Services().ByName("UsersService").Methods()
	usersServiceGetUserByEmailHandler := connect.NewUnaryHandler(
		UsersServiceGetUserByEmailProcedure,
		svc.GetUserByEmail,
		connect.WithSchema(usersServiceMethods.ByName("GetUserByEmail")),
		connect.WithHandlerOptions(opts...),
	)
	usersServiceGetUserHandler := connect.NewUnaryHandler(
		UsersServiceGetUserProcedure,
		svc.GetUser,
		connect.WithSchema(usersServiceMethods.ByName("GetUser")),
		connect.WithHandlerOptions(opts...),
	)
	usersServiceGetUsersHandler := connect.NewUnaryHandler(
		UsersServiceGetUsersProcedure,
		svc.GetUsers,
		connect.WithSchema(usersServiceMethods.ByName("GetUsers")),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	usersServiceCreateUserHandler := connect.NewUnaryHandler(
		UsersServiceCreateUserProcedure,
		svc.CreateUser,
		connect.WithSchema(usersServiceMethods.ByName("CreateUser")),
		connect.WithHandlerOptions(opts...),
	)
	usersServiceUpdateUserHandler := connect.NewUnaryHandler(
		UsersServiceUpdateUserProcedure,
		svc.UpdateUser,
		connect.WithSchema(usersServiceMethods.ByName("UpdateUser")),
		connect.WithHandlerOptions(opts...),
	)
	usersServiceDeleteUserHandler := connect.NewUnaryHandler(
		UsersServiceDeleteUserProcedure,
		svc.DeleteUser,
		connect.WithSchema(usersServiceMethods.ByName("DeleteUser")),
		connect.WithHandlerOptions(opts...),
	)
	usersServiceGetNotificationsHandler := connect.NewUnaryHandler(
		UsersServiceGetNotificationsProcedure,
		svc.GetNotifications,
		connect.WithSchema(usersServiceMethods.ByName("GetNotifications")),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	usersServiceGetUserNotificationsHandler := connect.NewUnaryHandler(
		UsersServiceGetUserNotificationsProcedure,
		svc.GetUserNotifications,
		connect.WithSchema(usersServiceMethods.ByName("GetUserNotifications")),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	usersServiceCreateNotificationHandler := connect.NewUnaryHandler(
		UsersServiceCreateNotificationProcedure,
		svc.CreateNotification,
		connect.WithSchema(usersServiceMethods.ByName("CreateNotification")),
		connect.WithHandlerOptions(opts...),
	)
	usersServiceEditNotificationHandler := connect.NewUnaryHandler(
		UsersServiceEditNotificationProcedure,
		svc.EditNotification,
		connect.WithSchema(usersServiceMethods.ByName("EditNotification")),
		connect.WithHandlerOptions(opts...),
	)
	usersServiceDeleteNotificationHandler := connect.NewUnaryHandler(
		UsersServiceDeleteNotificationProcedure,
		svc.DeleteNotification,
		connect.WithSchema(usersServiceMethods.ByName("DeleteNotification")),
		connect.WithHandlerOptions(opts...),
	)
	return "/api.users.UsersService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case UsersServiceGetUserByEmailProcedure:
			usersServiceGetUserByEmailHandler.ServeHTTP(w, r)
		case UsersServiceGetUserProcedure:
			usersServiceGetUserHandler.ServeHTTP(w, r)
		case UsersServiceGetUsersProcedure:
			usersServiceGetUsersHandler.ServeHTTP(w, r)
		case UsersServiceCreateUserProcedure:
			usersServiceCreateUserHandler.ServeHTTP(w, r)
		case UsersServiceUpdateUserProcedure:
			usersServiceUpdateUserHandler.ServeHTTP(w, r)
		case UsersServiceDeleteUserProcedure:
			usersServiceDeleteUserHandler.ServeHTTP(w, r)
		case UsersServiceGetNotificationsProcedure:
			usersServiceGetNotificationsHandler.ServeHTTP(w, r)
		case UsersServiceGetUserNotificationsProcedure:
			usersServiceGetUserNotificationsHandler.ServeHTTP(w, r)
		case UsersServiceCreateNotificationProcedure:
			usersServiceCreateNotificationHandler.ServeHTTP(w, r)
		case UsersServiceEditNotificationProcedure:
			usersServiceEditNotificationHandler.ServeHTTP(w, r)
		case UsersServiceDeleteNotificationProcedure:
			usersServiceDeleteNotificationHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedUsersServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedUsersServiceHandler struct{}

func (UnimplementedUsersServiceHandler) GetUserByEmail(context.Context, *connect.Request[users.UserByEmailRequest]) (*connect.Response[users.Users], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.users.UsersService.GetUserByEmail is not implemented"))
}

func (UnimplementedUsersServiceHandler) GetUser(context.Context, *connect.Request[users.GetUserRequest]) (*connect.Response[users.Users], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.users.UsersService.GetUser is not implemented"))
}

func (UnimplementedUsersServiceHandler) GetUsers(context.Context, *connect.Request[users.GetUsersRequest]) (*connect.Response[users.GetUsersResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.users.UsersService.GetUsers is not implemented"))
}

func (UnimplementedUsersServiceHandler) CreateUser(context.Context, *connect.Request[users.CreateUserRequest]) (*connect.Response[users.Users], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.users.UsersService.CreateUser is not implemented"))
}

func (UnimplementedUsersServiceHandler) UpdateUser(context.Context, *connect.Request[users.UpdateUserRequest]) (*connect.Response[users.Users], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.users.UsersService.UpdateUser is not implemented"))
}

func (UnimplementedUsersServiceHandler) DeleteUser(context.Context, *connect.Request[users.DeleteUserRequest]) (*connect.Response[users.DeleteUserResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.users.UsersService.DeleteUser is not implemented"))
}

func (UnimplementedUsersServiceHandler) GetNotifications(context.Context, *connect.Request[users.GetNotificationsRequest]) (*connect.Response[users.GetNotificationsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.users.UsersService.GetNotifications is not implemented"))
}

func (UnimplementedUsersServiceHandler) GetUserNotifications(context.Context, *connect.Request[users.GetUserNotificationsRequest]) (*connect.Response[users.GetUserNotificationsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.users.UsersService.GetUserNotifications is not implemented"))
}

func (UnimplementedUsersServiceHandler) CreateNotification(context.Context, *connect.Request[users.CreateNotificationRequest]) (*connect.Response[users.Notifications], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.users.UsersService.CreateNotification is not implemented"))
}

func (UnimplementedUsersServiceHandler) EditNotification(context.Context, *connect.Request[users.EditNotificationRequest]) (*connect.Response[users.Notifications], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.users.UsersService.EditNotification is not implemented"))
}

func (UnimplementedUsersServiceHandler) DeleteNotification(context.Context, *connect.Request[users.DeleteNotificationRequest]) (*connect.Response[users.DeleteNotificationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.users.UsersService.DeleteNotification is not implemented"))
}
