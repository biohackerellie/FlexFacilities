syntax = "proto3";

package api.reservation;

option go_package = "api/internal/proto/reservation;reservationservice";


message Reservation {
  int64 id = 1;
  string user_id = 2;
  string event_name = 3;
  int64 facility_id = 4;
  string approved = 5;
  string created_at = 6;
  string updated_at = 7;
  optional string details = 8;
  string fees = 9;                // pgtype.Numeric as string
  bool insurance = 10;
  optional bool door_access = 11;
  optional string doors_details = 12;
  string name = 13;
  optional string tech_details = 14;
  optional bool tech_support = 15;
  optional string phone = 16;
  int64 category_id = 17;
  optional double total_hours = 18;
  bool in_person = 19;
  bool paid = 20;
  optional string payment_url = 21;
  optional string payment_link_id = 22;
  optional string insurance_link = 23;
  string cost_override = 24;      // pgtype.Numeric as string
  optional string rrule = 25;
  repeated string rdates = 26;
  repeated string exdates = 27;
  optional string gcal_eventid = 28;
}



message ReservationDate {
  int64 id = 1;
  int64 reservation_id = 2;
  string approved = 3;
  optional string gcal_eventid = 4;
  string local_start = 5;
  string local_end = 6;
}

message RecurrencePattern {
  string freq = 1;
  repeated string by_weekday = 2;
  string until = 3;
  int32 count = 4;
}
message Occurrence {
  string start = 1; // "YYYY-MM-DDTHH:mm"
  string end = 2; // "YYYY-MM-DDTHH:mm"
}


message ReservationFee {
  int64 id = 1;
  string additional_fees = 2;             // pgtype.Numeric as string
  optional string fees_type = 3;
  int64 reservation_id = 4;
}

message FullReservation {
  Reservation reservation = 1;
  repeated ReservationDate dates = 2;
  repeated ReservationFee fees = 3;
}
message FullResWithFacilityName {
  string event_name = 1;
  string facility_name = 2;
  string reservation_date = 3;
  string approved = 4;
  string user_name = 5;
  int64 reservation_id = 6;
}


service ReservationService {
  rpc GetAllReservations (GetAllReservationsRequest) returns (AllReservationsResponse){
    option idempotency_level = NO_SIDE_EFFECTS;
  };
  rpc GetReservation (GetReservationRequest) returns (FullReservation){
    option idempotency_level = NO_SIDE_EFFECTS;
  };
  rpc RequestCount (RequestCountRequest) returns (RequestCountResponse){
    option idempotency_level = NO_SIDE_EFFECTS;
  };
  rpc GetRequestsThisWeek (GetRequestsThisWeekRequest) returns (RequestThisWeekResponse){
    option idempotency_level = NO_SIDE_EFFECTS;
  };
  rpc CreateReservation (CreateReservationRequest) returns (CreateReservationResponse);
  rpc UpdateReservation (UpdateReservationRequest) returns (UpdateReservationResponse);
  rpc UpdateReservationStatus (UpdateReservationStatusRequest) returns (UpdateReservationResponse);
  rpc DeleteReservation (DeleteReservationRequest) returns (DeleteReservationResponse);
  rpc UserReservations (UserReservationsRequest) returns (UserReservationsResponse){
    option idempotency_level = NO_SIDE_EFFECTS;
  };
  rpc CreateReservationDates (CreateReservationDatesRequest) returns (CreateReservationDatesResponse);
  rpc UpdateReservationDates (UpdateReservationDatesRequest) returns (UpdateReservationDatesResponse);
  rpc UpdateReservationDatesStatus (UpdateReservationDatesStatusRequest) returns (UpdateReservationDatesStatusResponse);
  rpc DeleteReservationDates (DeleteReservationDatesRequest) returns (DeleteReservationDatesResponse);
  rpc CreateReservationFee (CreateReservationFeeRequest) returns (CreateReservationFeeResponse);
  rpc UpdateReservationFee (UpdateReservationFeeRequest) returns (UpdateReservationFeeResponse);
  rpc DeleteReservationFee (DeleteReservationFeeRequest) returns (DeleteReservationFeeResponse);
  rpc CostReducer (CostReducerRequest) returns (CostReducerResponse);
  rpc GetAllPending(GetAllReservationsRequest) returns (AllPendingResponse){
    option idempotency_level = NO_SIDE_EFFECTS;
  };
  rpc AllSortedReservations (GetAllReservationsRequest) returns (AllSortedResponse){
    option idempotency_level = NO_SIDE_EFFECTS;
  };
}


message AllPendingResponse {
  repeated FullResWithFacilityName data = 1; 
}
message AllSortedResponse {
  repeated FullResWithFacilityName past = 1;
  repeated FullResWithFacilityName future = 2;
}

message UpdateReservationStatusRequest {
  int64 id = 1;
  string status = 2;
}
message UpdateReservationDatesStatusRequest {
  repeated int64 ids = 1;
  string status = 2;
}
message UpdateReservationDatesStatusResponse {}
message AllReservationsResponse {
  repeated FullReservation reservations = 1;
}

message RequestThisWeekResponse {
  repeated FullReservation reservations = 1;
}

message ApprovedReservationsResponse {
  repeated FullReservation reservations = 1;
}

message PendingReservationsResponse {
  repeated FullReservation reservations = 1;
}

message UserReservationsResponse {
  repeated FullResWithFacilityName  reservations = 1;
}


message GetAllReservationsRequest {}

message GetReservationRequest {
  int64 id = 1;
}

message RequestCountRequest {}

message RequestCountResponse {
  int64 count = 1;
}

message GetRequestsThisWeekRequest {}
message CreateReservationRequest {
  string user_id = 1;
  string event_name = 2;
  int64 facility_id = 3;
  string details = 4;
  int64 category_id = 5;
  string name = 6;
  string phone = 7;
  bool tech_support = 8;
  optional string tech_details = 9;
  bool door_access = 10;
  optional string doors_details = 11;
  
  repeated Occurrence occurrences = 12;
  
  string start_date = 13;
  string start_time = 14;
  string end_date = 15;
  string end_time = 16;
  optional RecurrencePattern pattern = 17;
  repeated string rdates = 18;
  repeated string exdates = 19;
}
message CreateReservationResponse {
  int64 id = 1;
}

message UpdateReservationRequest {
  Reservation reservation = 1;
}
message UpdateReservationResponse {}

message DeleteReservationRequest {
  int64 id = 1;
}
message DeleteReservationResponse {}

message UserReservationsRequest {
  string user_id = 1;
}

message CreateReservationDatesRequest {
  repeated ReservationDate date = 1; 
}

message CreateReservationDatesResponse {}

message UpdateReservationDatesResponse {}
message DeleteReservationDatesResponse {}
message CreateReservationFeeResponse {}
message UpdateReservationFeeResponse {}
message DeleteReservationFeeResponse {}

message UpdateReservationDatesRequest {
   repeated ReservationDate date = 1; 
}

message DeleteReservationDatesRequest {
  repeated int64 id = 1;
}

message CreateReservationFeeRequest {
  repeated ReservationFee fee = 1; 
}

message UpdateReservationFeeRequest {
  ReservationFee fee = 1; 
}

message DeleteReservationFeeRequest {
  int64 id = 1;
}


message CostReducerRequest {
  int64 id = 1;
}

message CostReducerResponse {
  string cost = 1;
}


