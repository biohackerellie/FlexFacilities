version: '3'
env:
  API_ROOT: ./api
  NEXT_ROOT: ./app
  WWW_ROOT: ./www

dotenv: [.env]

tasks:
  default:
    desc: Display all tasks
    cmds:
      - task: list
  
  list:
    desc: List all tasks
    cmds:
      - task -l

  gen:proto:
    desc: Generate proto
    cmds:
      - buf generate
  gen:types:
    desc: Generate next route types
    dir: "{{.NEXT_ROOT}}"
    cmds:
      - bun --bun --env-file=../.env run typegen
  clean:bun:
    desc: clean files
    cmds:
      - cd app && bun run clean
  lint:bun:
    desc: lint ts files
    dir: "{{.NEXT_ROOT}}"
    cmds: 
      - bun run check:fix
  lint:go:
    dir: "{{.API_ROOT}}"
    desc: lint go files
    cmds:
      - golangci-lint run -c .golangci.yml
  lint:types:
    dir: "{{.NEXT_ROOT}}"
    desc: typecheck typescript files
    cmds:
      - bun --bun run typecheck
  lint:
    desc: lint all files
    cmds:
      - task: lint:bun
      - task: lint:go
      - task: lint:types
  dev:bun:
    desc: start dev server
    cmds:
      - cd app && bun --bun --env-file=../.env run dev
  
  dev:
    desc: start dev go and bun servers
    cmds:
      - concurrently "cd api && air -c .air.toml" "cd app && bun --bun --env-file=../.env run dev"
  dev:go:
    desc: start dev go server
    dir: "{{.API_ROOT}}"
    cmds:
      - air -c .air.toml -- -env ../.env
  dev:www:
    desc: start dev www server
    dir: "{{.WWW_ROOT}}" 
    cmds:
      - air -c .air.toml
  install:bun:
    desc: install dependencies
    cmds:
      - cd app && bun install
  install:go:
    desc: install dependencies
    cmds:
      - cd api && go mod tidy
  install:
    desc: install dependencies
    cmds:
      - task install:bun
      - task install:go
  bun:
    desc: run bun commands
    dir: "{{.NEXT_ROOT}}"
    cmds:
      - bun {{.CLI_ARGS}}
  go: 
    desc: run go commands
    dir: "{{.API_ROOT}}"
    cmds:
      - go {{.CLI_ARGS}}
